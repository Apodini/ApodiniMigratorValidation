openapi: 3.0.1
info:
  title: Car Configurator
  description: The Car Configurator API offers access to the Mercedes-Benz car configuration
    functions. It provides required reference data such as the masterdata of all Mercedes-Benz
    vehicles as well as functions to retrieve initial and changed configurations.
    In addition to that is is possible to save a newly created configuration so that
    it can be easily restored or shared with others.
  contact:
    name: The open API platform by Mercedes-Benz
  version: "1.0"
  x-apisguru-categories:
  - transport
  x-logo:
    url: https://twitter.com/MercedesBenz/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://developer.mercedes-benz.com/content/sites/default/files/2018-08/swagger_car_configurator_api.json
    version: "2.0"
  x-providerName: mercedes-benz.com
  x-serviceName: configurator
servers:
- url: https://api.mercedes-benz.com/configurator/v1
tags:
- name: References
  description: Provide static reference data about cars like markets, bodies, classes,
    etc.
- name: Configurations
  description: Select equipment and configure a car
- name: Images
  description: Get images for the vehicle configuration and its components
- name: Saved configurations
  description: Store and load configurations with an onlinecode
paths:
  /markets:
    get:
      tags:
      - References
      summary: Get all available markets.
      description: Get all available `Markets`. Optional query params **language**
        or **country** may be used to filter the result.
      operationId: marketsGET
      parameters:
      - $ref: '#/components/parameters/languageParam'
      - $ref: '#/components/parameters/countryParam'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Markets
                type: array
                items:
                  $ref: '#/components/schemas/Market'
        204:
          description: No content found for requested parameters language and/or country
          content: {}
        400:
          description: |-
            Invalid parameter was specified:
             * Language parameter is not valid
             * Country parameter is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}:
    get:
      tags:
      - References
      summary: Get the market with the given marketId.
      description: Gets the `Market` for the given **marketId**. There are no query
        parameters to filter the result.
      operationId: marketGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        400:
          description: MarketId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market not found for requested marketId
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/bodies:
    get:
      tags:
      - References
      summary: Get all available bodies for the given marketId.
      description: Get all available `VehicleBodies` for the given **marketId**. Optional
        query params **classId** **bodyId** or **productGroups** may be used to filter
        the result and must conform to the pattern [0-9A-Z_-]+.
      operationId: bodiesGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/classIdParam'
      - $ref: '#/components/parameters/bodyIdParam'
      - $ref: '#/components/parameters/productGroups'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: VehicleBodies
                type: array
                items:
                  $ref: '#/components/schemas/VehicleBody'
        204:
          description: No content found for requested parameters classId, bodyId and/or
            productGroups
          content: {}
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * ProductGroups is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/bodies/{bodyId}:
    get:
      tags:
      - References
      summary: Get the body for the given marketId and bodyId.
      description: Get the `VehicleBody` for the given **marketId** and **bodyId**.
      operationId: bodyGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/bodyId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleBody'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * BodyId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market or VehicleBody not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/classes:
    get:
      tags:
      - References
      summary: Get all available classes for the given marketId.
      description: Get all available `VehicleClasses` objects for the given **marketId**.
        Optional query params **classId**, **bodyId** or **productGroups** may be
        used to filter the result and must conform to the pattern [0-9A-Z_-]+.
      operationId: classesGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/classIdParam'
      - $ref: '#/components/parameters/bodyIdParam'
      - $ref: '#/components/parameters/productGroups'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: VehicleClasses
                type: array
                items:
                  $ref: '#/components/schemas/VehicleClass'
        204:
          description: No content found for requested parameters classId, bodyId and/or
            productGroups
          content: {}
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * Product group is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market has not been found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/classes/{classId}:
    get:
      tags:
      - References
      summary: Get the class for the given marketId and classId.
      description: Get the `VehicleClass` for the given **marketId** and **classId**.
      operationId: classGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/classId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleClass'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market or VehicleClass not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/models:
    get:
      tags:
      - References
      summary: Get all available models for the given marketId.
      description: Get the available `VehicleModels` for the given **marketId**. Optional
        query params **classId**, **bodyId**, **baumuster4prefix**, **baumuster**,
        **nationalSalesType** or **productGroups** maybe used to filter the result.
        The baumuster4prefix must conform to the pattern [0-9]{4}.
      operationId: modelsGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/classIdParam'
      - $ref: '#/components/parameters/bodyIdParam'
      - $ref: '#/components/parameters/baumuster4prefixParam'
      - $ref: '#/components/parameters/baumusterParam'
      - $ref: '#/components/parameters/nationalSalesTypeParam'
      - $ref: '#/components/parameters/productGroups'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: VehicleModels
                type: array
                items:
                  $ref: '#/components/schemas/VehicleModel'
        204:
          description: No content found for requested parameters classId, bodyId,
            baumuster4prefix, baumuster, nationalSalesType and/or productGroups
          content: {}
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * Product group is not valid
             * baumuster4prefix is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/models/{modelId}:
    get:
      tags:
      - References
      summary: Get the model for the given marketId and modelId.
      description: Get the `VehicleModel` object for the given **marketId** and **modelId**.
      operationId: modelGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market or Model not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
  /markets/{marketId}/models/{modelId}/configurations/initial:
    get:
      tags:
      - Configurations
      summary: Get the initial configuration for the given marketId and modelId.
      description: Get the initial `VehicleConfiguration` for the given **marketId**
        and **modelId**.
      operationId: modelConfigurationsGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market or Model not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: Configurations
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}:
    get:
      tags:
      - Configurations
      summary: Get the configuration for the given marketId, modelId and configurationId.
      description: Get the `VehicleConfiguration` for the given **marketId**, **modelId**
        and **configurationId**.
      operationId: modelConfigurationGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market, Model or Configuration not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: Configurations
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/alternatives/{componentList}:
    get:
      tags:
      - Configurations
      summary: Get the alternatives for the given marketId, modelId, configurationId
        and componentList.
      description: Get the `VehicleAlternatives` for the given **marketId**, **modelId**
        and **configurationId** and the given **componentList** of changes.
      operationId: modelConfigurationAlternativesGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      - $ref: '#/components/parameters/componentList'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: VehicleAlternatives
                type: array
                items:
                  $ref: '#/components/schemas/VehicleAlternative'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
             * ComponentList is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market, Model or Configuration not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: configurations176042_002
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components:
    get:
      tags:
      - Images
      description: |-
        Returns URLs pointing to images in JPG format in the highest available resolution (depending on the component) of the vehicle's:
          * engine (1024x576 px),
          * rim (710x710 px),
          * trim (800x600 px),
          * paints (800x600 px),
          * upholstery (800x600 px) and
          * equipments (740x416 px).
      operationId: imageComponentsGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentsImagesResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/engine:
    get:
      tags:
      - Images
      description: Returns a URL pointing to an image of the vehicles engine.  These
        images are available in the resolution 1024x576 px.
      operationId: imageComponentsEngineGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/equipments:
    get:
      tags:
      - Images
      description: Returns URLs pointing to images of this vehicle's equipments. The
        images are available in the highest possible resolution (usually 740x416 px).
      operationId: imageComponentsEquipmentsGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEquipmentImagesResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/equipments/{componentCode}:
    get:
      tags:
      - Images
      description: Returns URLs pointing to images of this vehicle's equipments. The
        images are available in the highest possible resolution (usually 740x416 px).
      operationId: imageComponentsEquipmentsByCodeGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      - $ref: '#/components/parameters/componentCode'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/paint:
    get:
      tags:
      - Images
      description: Returns URLs pointing to images of this vehicles paint.  These
        images are available in resolution 800x600 px.  Note there might be two paints
        (e.g. Smart, 'paint' for body panel and 'paint2' for the tridion cell)
      operationId: imageComponentsPaintGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaintImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/rim:
    get:
      tags:
      - Images
      description: Returns a URL pointing to an image of the vehicles rim.  These
        images are available in the resolution 710x710 px.
      operationId: imageComponentsRimGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RimImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/trim:
    get:
      tags:
      - Images
      description: Returns a URL pointing to an image of this vehicles trim.  These
        images are available in resolution 800x600 px.
      operationId: imageComponentsTrimGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrimImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/upholstery:
    get:
      tags:
      - Images
      description: Returns URLs pointing to images of the vehicle's upholsteries.
        Tge images are available in the highest possible resolution (usually 800x600
        px).
      operationId: imageComponentsUpholsteryGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpholsteryImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_components
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/vehicle:
    get:
      tags:
      - Images
      description: Returns URLs pointing to PNG images of a vehicle with a white background.
      operationId: imageVehicleGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      - $ref: '#/components/parameters/perspectives'
      - $ref: '#/components/parameters/roofOpen'
      - $ref: '#/components/parameters/night'
      responses:
        200:
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image
                is considered to be up-to-date.
              schema:
                type: string
                default: max-age=86400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleImageResponse'
        204:
          description: No content could be found for your request.
          content: {}
        400:
          description: One of the provided parameters was invalid. Verify your query
            and inspect the global error object in the response for further information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: The requested marketId, modelId and/or configurationId not
            found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: The server encountered an internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
    x-swagger-router-controller: images_vehicle_configuration
  /markets/{marketId}/models/{modelId}/configurations/{configurationId}/selectables:
    get:
      tags:
      - Configurations
      summary: Get the selectable components for the given marketId, modelId and configurationId.
      description: Get the selectable `VehicleComponents` and the `ComponentCategories`
        of the `VehicleConfiguration` for the given **marketId**, **modelId** and
        **configurationId**. Optional query param **componentType** may be used to
        filter the result.
      operationId: modelConfigurationSelectablesGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/modelId'
      - $ref: '#/components/parameters/configurationId'
      - $ref: '#/components/parameters/componentTypes'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleComponentTree'
        204:
          description: No content found for requested componentTypes
          content: {}
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
             * ComponentTypes is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market, Model or Configuration not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: Configurations
  /markets/{marketId}/onlinecode:
    post:
      tags:
      - Saved configurations
      summary: Stores the configuration of the given configurationId and modelId
      description: Stores the configuration of the given **configurationId** and **modelId**
      operationId: onlineCodePOST
      parameters:
      - $ref: '#/components/parameters/marketId'
      requestBody:
        $ref: '#/components/requestBodies/onlineCodeRequestBody'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineCodeResponseBody'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Configuration has not been found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: Saved_configurations
  /markets/{marketId}/onlinecode/{onlineCode}:
    get:
      tags:
      - Saved configurations
      summary: Get the configuration of the given onlineCode and marketId.
      description: Gets the configuration for the given marketId and onlineCode.
      operationId: onlineCodeGET
      parameters:
      - $ref: '#/components/parameters/onlineCode'
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
        400:
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * OnlineCode is not valid
             * Fields is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Configuration or Market has not been found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: Saved_configurations
  /markets/{marketId}/productgroups:
    get:
      tags:
      - References
      summary: Get all configured active product groups for the given marketId.
      description: Get all configured active product groups for the given **marketId**.
      operationId: productGroupsGET
      parameters:
      - $ref: '#/components/parameters/marketId'
      - $ref: '#/components/parameters/fieldsFilter'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroupsPerMarket'
        400:
          description: MarketId is not valid
          content: {}
        401:
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
          content: {}
        404:
          description: Market not found
          content: {}
        429:
          description: Quota limit is exceeded
          content: {}
        500:
          description: An Error occurred on the server side
          content: {}
    x-swagger-router-controller: References
components:
  schemas:
    AllEquipmentImagesResponse:
      required:
      - equipments
      type: object
      properties:
        equipments:
          $ref: '#/components/schemas/EquipmentImageMap'
      description: The response object holds either an error object, in case that
        the request was malformed, or an equipments object containing a map with all
        equipment urls for the requested vehicle with the equipment codes as map keys.
    Amount:
      required:
      - value
      type: object
      properties:
        unit:
          type: string
        value:
          type: number
      description: Holds a value and unit.
    CodeImage:
      required:
      - code
      - url
      type: object
      properties:
        code:
          type: string
          description: The equipment code for the corresponding image.
        url:
          type: string
          description: An URL pointing to an image of an equipment.
      description: The code image contains an equipment code with a corresponding
        image URL.
    ComponentsImages:
      type: object
      properties:
        engine:
          $ref: '#/components/schemas/ImageUrl'
        equipments:
          $ref: '#/components/schemas/EquipmentImageMap'
        paint:
          $ref: '#/components/schemas/PaintsImages'
        rim:
          $ref: '#/components/schemas/CodeImage'
        trim:
          $ref: '#/components/schemas/CodeImage'
        upholstery:
          $ref: '#/components/schemas/CodeImage'
      description: A set of URLs pointing to images of the vehicle in low resolution.
    ComponentsImagesResponse:
      type: object
      properties:
        components:
          $ref: '#/components/schemas/ComponentsImages'
      description: Components images object
    DriveConcept:
      type: string
      description: The kind of drive concept of a vehicle. Where UNDEFINED is used
        as the default and/or error case.
      enum:
      - COMBUSTOR
      - HYBRID
      - ELECTRIC
      - FUELCELL
      - UNDEFINED
    Engine:
      required:
      - fuelType
      type: object
      properties:
        alternativeFuelType:
          $ref: '#/components/schemas/FuelType'
        capacity:
          $ref: '#/components/schemas/Amount'
        cylinder:
          type: string
        driveConcept:
          $ref: '#/components/schemas/DriveConcept'
        emissionStandard:
          type: string
        engineConcept:
          $ref: '#/components/schemas/EngineConcept'
        fuelEconomy:
          $ref: '#/components/schemas/FuelEconomy'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        powerHp:
          $ref: '#/components/schemas/Amount'
        powerHybridExtensionHp:
          $ref: '#/components/schemas/Amount'
        powerHybridExtensionKw:
          $ref: '#/components/schemas/Amount'
        powerKw:
          $ref: '#/components/schemas/Amount'
      description: All technical information about a specific engine.
    EngineConcept:
      type: string
      description: The kind of fuel used by an engine of a vehicle determines the
        engine type. Where UNDEFINED is used as the default and/or error case.
      enum:
      - MONO_REGULAR
      - MONO_DIESEL
      - MONO_GAS
      - MONO_ELECTRIC
      - MONO_FUELCELL
      - BI_NGT
      - BI_NGD
      - BI_MILD
      - BI_PLUGIN
      - MONO_UNDEFINED
      - BI_UNDEFINED
      - BI_HYBRID_UNDEFINED
      - BI_COMBUSTION_UNDEFINED
      - UNDEFINED
    EngineImageResponse:
      type: object
      properties:
        engine:
          $ref: '#/components/schemas/ImageUrl'
      description: An engine image object
    EquipmentImageMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ImageUrl'
      description: The map holds either an error object, in case that the request
        was malformed, or an equipments object containing a map with all equipment
        image urls for the requested vehicle with the equipment codes as map keys.
    EquipmentImageResponse:
      type: object
      properties:
        equipment:
          $ref: '#/components/schemas/ImageUrl'
      description: An equipment image object
    FuelEconomy:
      type: object
      properties:
        consumptionOfElectricityMax:
          $ref: '#/components/schemas/Amount'
        consumptionOfElectricityMin:
          $ref: '#/components/schemas/Amount'
        emissionCO2Max:
          $ref: '#/components/schemas/Amount'
        emissionCO2Min:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCityMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCityMin:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCombinedMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCombinedMin:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionElectricity:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionOverlandMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionOverlandMin:
          $ref: '#/components/schemas/Amount'
      description: This is for the fuel consumption holding a value and unit.
    FuelType:
      type: string
      description: The kind of fuel used by an engine of a vehicle. Where UNDEFINED
        is used as the default and/or error case.
      enum:
      - NORMAL
      - SUPER
      - SUPERPLUS
      - DIESEL
      - HGAS
      - GAS
      - ELECTRIC
      - FUELCELL
      - UNDEFINED
    HRef:
      required:
      - href
      type: object
      properties:
        href:
          type: string
      description: The URL to the specific resource.
    ImageComponentLink:
      required:
      - imageapi_component
      type: object
      properties:
        imageapi_component:
          $ref: '#/components/schemas/HRef'
      description: Link to VIM image API.
    ImageError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        uuid:
          type: string
      description: The error object containing detailed information about the error.
    ImageUrl:
      type: object
      properties:
        url:
          type: string
      description: An object describing an image URL that could be a vehicle image
        for example. This includes the URL to the content.
    ImageUrlWithError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ImageError'
        url:
          type: string
      description: An object describing an image URL that could be a vehicle image
        for example. This includes the URL to the content. In case of an error that
        is related to the requested image material (e.g. perspective), an error object
        is present containing further information.
    Market:
      required:
      - _links
      - country
      - language
      - marketId
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfReferencesLinks'
        country:
          type: string
        language:
          type: string
        marketId:
          type: string
      description: Represent a market (aka country) with a specific country and a
        language.
    Nedc:
      type: object
      properties:
        consumption:
          $ref: '#/components/schemas/NedcConsumption'
        electricRange:
          $ref: '#/components/schemas/NedcAmount'
        emission:
          $ref: '#/components/schemas/NedcEmission'
        weight:
          $ref: '#/components/schemas/NedcAmount'
      description: Holds all relevant informations for the Nedc 'New European Drive
        Cycle'.
    NedcAmount:
      required:
      - individual
      - max
      - min
      type: object
      properties:
        individual:
          $ref: '#/components/schemas/Amount'
        max:
          $ref: '#/components/schemas/Amount'
        min:
          $ref: '#/components/schemas/Amount'
      description: The Nedc 'New European Drive Cycle' specific amount holds the nedc
        specific values.
    NedcConsumption:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/NedcGear'
        combined:
          $ref: '#/components/schemas/NedcGear'
        country:
          $ref: '#/components/schemas/NedcGear'
        electric:
          $ref: '#/components/schemas/NedcAmount'
        weighted:
          $ref: '#/components/schemas/NedcGear'
      description: The Nedc 'New European Drive Cycle' consumption.
    NedcEmission:
      type: object
      properties:
        city:
          $ref: '#/components/schemas/NedcGear'
        combined:
          $ref: '#/components/schemas/NedcGear'
        country:
          $ref: '#/components/schemas/NedcGear'
        weighted:
          $ref: '#/components/schemas/NedcAmount'
      description: The Nedc 'New European Drive Cycle' emission.
    NedcGear:
      type: object
      properties:
        primaryGear:
          $ref: '#/components/schemas/NedcAmount'
        secondaryGear:
          $ref: '#/components/schemas/NedcAmount'
      description: The gear of a vehicle. A vehicle can have a primary and a secondary
        gear.
    OnlineCodeRequestBody:
      required:
      - configurationId
      - modelId
      type: object
      properties:
        configurationId:
          type: string
          description: String that identifies a configuration. e.g. E-D15-D18-D41-D46-D49-D52-D53-D54-D59-D60-D71-F32-F36-F88-F98-G03-G05-G36-G56-I61-J67-M23-M70-N18-N25-N62-N92-O76-Q29-Q56-Q79-Q92-S01-S05-S08-S63-S92-T05-T07-T62-T84-T88_I-953_L-696_P-001_S-152-160-161-171-258-290-292-294-411-442-470-472-475-485-516-533-538-560-570-573-580-584-58U-591-620-70B-807-888-B03-B16-B51-K11-L18-R43-U60
        modelId:
          type: string
          description: String that identifies a model. e.g. '176042_002'
      description: JSON object containing the modelId and the configurationId
      example:
        configurationId: E-AB5-D09-D14-D53-D71-D80-L06-L19-M69-M70-M88-M94-N63-O16-O92-Q31-Q56-S09-S16_L-197_P-518_S-08U-09U-11R-12U-14U-160-16U-17U-223-231-233-235-23P-249-266-275-276-290-293-297-299-351-360-401-402-413-427-432-436-439-441-443-448-452-453-463-470-471-475-487-503-518-531-538-540-551-581-582-596-628-642-68U-70B-735-808-810-840-871-874-877-881-882-883-889-897-8U0-902-B59-H29-L2B-P07-P09-P17-P21-P34-P35-P47-P54-P64-R66-SZ4-U10-U12-U25
        modelId: 222980000
    OnlineCodeResponseBody:
      required:
      - onlineCode
      type: object
      properties:
        onlineCode:
          type: string
          description: String that identifies the online code
      description: The onlinecode is a unique identifier for a stored vehicle configuration.
    PaintImageResponse:
      type: object
      properties:
        paint:
          $ref: '#/components/schemas/PaintsImages'
      description: A paint image object
    PaintsImages:
      type: object
      properties:
        paint1:
          $ref: '#/components/schemas/CodeImage'
        paint2:
          $ref: '#/components/schemas/CodeImage'
      description: The upper (paint2) and the lower (paint1) paint of the vehicle.
    PriceInformation:
      required:
      - currency
      - netPrice
      - price
      - taxes
      type: object
      properties:
        currency:
          type: string
        instalmentPrice:
          type: number
        netPrice:
          type: number
        price:
          type: number
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
      description: The prices, installment price, taxes and ISO currency of a vehicle.
    ProductGroup:
      required:
      - name
      type: object
      properties:
        name:
          type: string
      description: Represent a product group.
      enum:
      - PKW
      - VAN
      - SMART
    ProductGroupsPerMarket:
      required:
      - _links
      - market
      - productGroups
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        market:
          $ref: '#/components/schemas/Market'
        productGroups:
          type: array
          items:
            $ref: '#/components/schemas/ProductGroup'
      description: Represent the active product groups for a market.
    RimImageResponse:
      type: object
      properties:
        rim:
          $ref: '#/components/schemas/CodeImage'
      description: A rim image object
    SelfConfigurationLinks:
      required:
      - configuration
      - self
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/HRef'
        self:
          $ref: '#/components/schemas/HRef'
      description: Links to self and configuration resources.
    SelfLink:
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/HRef'
      description: Links to self.
    SelfModelLinks:
      required:
      - models
      - self
      type: object
      properties:
        models:
          $ref: '#/components/schemas/HRef'
        self:
          $ref: '#/components/schemas/HRef'
      description: Links to self and models resources.
    SelfReferencesLinks:
      required:
      - bodies
      - classes
      - models
      - productgroups
      - self
      type: object
      properties:
        bodies:
          $ref: '#/components/schemas/HRef'
        classes:
          $ref: '#/components/schemas/HRef'
        models:
          $ref: '#/components/schemas/HRef'
        productgroups:
          $ref: '#/components/schemas/HRef'
        self:
          $ref: '#/components/schemas/HRef'
      description: Market specific links to the specific resources. i.e. classes,
        bodies, etc.
    SelfSelectablesImageVehicleLinks:
      required:
      - imageapi_vehicle
      - selectables
      - self
      type: object
      properties:
        imageapi_vehicle:
          $ref: '#/components/schemas/HRef'
        selectables:
          $ref: '#/components/schemas/HRef'
        self:
          $ref: '#/components/schemas/HRef'
      description: Links to self and image resources.
    Tax:
      required:
      - amount
      - baseAmount
      - charge
      - id
      - rate
      type: object
      properties:
        amount:
          type: number
        baseAmount:
          type: number
        charge:
          type: number
        id:
          type: string
        rate:
          type: number
      description: The country specific tax information.
    TechnicalInformation:
      required:
      - engine
      - transmission
      type: object
      properties:
        acceleration:
          $ref: '#/components/schemas/Amount'
        doors:
          type: number
        energyEfficiencyClass:
          type: string
        engine:
          $ref: '#/components/schemas/Engine'
        nedc:
          $ref: '#/components/schemas/Nedc'
        seats:
          type: number
        topSpeed:
          $ref: '#/components/schemas/Amount'
        transmission:
          $ref: '#/components/schemas/Transmission'
        wltp:
          $ref: '#/components/schemas/Wltp'
      description: Contains all technical information calculated using BDAs.
    Transmission:
      required:
      - code
      - codeType
      - name
      type: object
      properties:
        code:
          type: string
        codeType:
          type: string
        name:
          type: string
      description: The transmission of the vehicle configuration.
    TrimImageResponse:
      type: object
      properties:
        trim:
          $ref: '#/components/schemas/CodeImage'
      description: A trim image object
    UpholsteryImageResponse:
      type: object
      properties:
        upholstery:
          $ref: '#/components/schemas/CodeImage'
      description: An upholstery image object
    VehicleAlternative:
      required:
      - _links
      - addedComponents
      - configurationId
      - marketId
      - modelId
      - priceInformation
      - removedComponents
      - updatedComponents
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfSelectablesImageVehicleLinks'
        addedComponents:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponent'
        configurationId:
          type: string
        marketId:
          type: string
        modelId:
          type: string
        priceInformation:
          type: object
          properties: {}
        removedComponents:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponent'
        updatedComponents:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponent'
      description: A vehicle alternative.
    VehicleBody:
      required:
      - _links
      - bodyId
      - bodyName
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        bodyId:
          type: string
        bodyName:
          type: string
      description: The body of a Vehicle, e.g. 'Limousine'.
    VehicleClass:
      required:
      - _links
      - classId
      - className
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        classId:
          type: string
        className:
          type: string
      description: The class of a Vehicle, e.g. 'A-Class'.
    VehicleComponent:
      required:
      - _links
      - code
      - codeType
      - componentSortId
      - componentType
      - description
      - fixed
      - hidden
      - id
      - name
      - priceInformation
      - pseudoCode
      - selected
      - standard
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/ImageComponentLink'
        code:
          type: string
        codeType:
          type: string
        componentSortId:
          type: number
        componentType:
          $ref: '#/components/schemas/VehicleComponentType'
        description:
          type: string
          description: HTML elements can be present
        fixed:
          type: boolean
          description: Cannot changed by the customer
        hidden:
          type: boolean
          description: Hidden, should not be displayed to the customer, not relevant
            for the customer
        id:
          type: string
        name:
          type: string
        priceInformation:
          $ref: '#/components/schemas/PriceInformation'
        pseudoCode:
          type: boolean
          description: Not relevant for the customer
        selected:
          type: boolean
          description: Selected by the customer
        standard:
          type: boolean
          description: Standard equipment
      description: A vehicle component.
    VehicleComponentCategory:
      required:
      - cardinality
      - categoryId
      - categoryName
      - categorySortId
      - componentIds
      - subcategories
      type: object
      properties:
        cardinality:
          $ref: '#/components/schemas/VehicleComponentCategoryCardinality'
        categoryId:
          type: string
        categoryName:
          type: string
        categorySortId:
          type: number
        componentIds:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponentId'
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponentCategory'
      description: The component category of a VehicleComponent.
    VehicleComponentCategoryCardinality:
      type: string
      description: The cardinality of the vehicle components belong to component category.
      enum:
      - NOT_DEFINED
      - ONE_OR_NONE
      - EXACTLY_ONE
      - ARBITRARY
    VehicleComponentId:
      required:
      - componentId
      type: object
      properties:
        componentId:
          type: string
      description: The component id of a VehicleComponent.
    VehicleComponentTree:
      required:
      - _links
      - componentCategories
      - vehicleComponents
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfLink'
        componentCategories:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponentCategory'
        vehicleComponents:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VehicleComponent'
      description: Contains the vehicle components and the structure with component
        categories.
    VehicleComponentType:
      type: string
      description: The component type of a vehicle component.
      enum:
      - ANY
      - WHEELS
      - PAINTS
      - UPHOLSTERIES
      - TRIMS
      - PACKAGES
      - LINES
      - SPECIAL_EDITION
      - SPECIAL_EQUIPMENT
    VehicleConfiguration:
      required:
      - _links
      - changeYear
      - configurationId
      - configurationPrice
      - initialPrice
      - marketId
      - modelId
      - modelYear
      - technicalInformation
      - vehicleComponents
      - wltpConfiguration
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfSelectablesImageVehicleLinks'
        changeYear:
          type: string
        configurationId:
          type: string
        configurationPrice:
          $ref: '#/components/schemas/PriceInformation'
        initialPrice:
          $ref: '#/components/schemas/PriceInformation'
        marketId:
          type: string
        modelId:
          type: string
        modelYear:
          type: string
        technicalInformation:
          $ref: '#/components/schemas/TechnicalInformation'
        vehicleComponents:
          type: array
          items:
            $ref: '#/components/schemas/VehicleComponent'
        wltpConfiguration:
          type: boolean
      description: A vehicle configuration.
    VehicleImageResponse:
      required:
      - vehicle
      type: object
      properties:
        vehicle:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ImageUrlWithError'
          description: A map holding a vehicle image for each requested perspective,
            e.g. EXT000.
      description: The response object holds either an error object, in case that
        the request was malformed, or a vehicle object containing all urls for the
        requested perspectives.
    VehicleModel:
      required:
      - _links
      - baumuster
      - modelId
      - name
      - nationalSalesType
      - priceInformation
      - productGroup
      - shortName
      - vehicleBody
      - vehicleClass
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/SelfConfigurationLinks'
        baumuster:
          type: string
        modelId:
          type: string
        name:
          type: string
        nationalSalesType:
          type: string
        priceInformation:
          $ref: '#/components/schemas/PriceInformation'
        productGroup:
          $ref: '#/components/schemas/ProductGroup'
        shortName:
          type: string
        vehicleBody:
          $ref: '#/components/schemas/VehicleBody'
        vehicleClass:
          $ref: '#/components/schemas/VehicleClass'
      description: The model of a Vehicle, e.g. '176042_002'.
    Wltp:
      type: object
      properties:
        consumption:
          $ref: '#/components/schemas/WltpConsumption'
        emission:
          $ref: '#/components/schemas/WltpEmission'
      description: Holds all relevant informations for the Wltp 'Worldwide harmonized
        Light vehicles Test Procedure' drive cycle.
    WltpAmount:
      required:
      - individual
      - max
      - min
      type: object
      properties:
        individual:
          $ref: '#/components/schemas/Amount'
        max:
          $ref: '#/components/schemas/Amount'
        min:
          $ref: '#/components/schemas/Amount'
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' drive
        cycle specific amount holds the wltp specific values.
    WltpConsumption:
      type: object
      properties:
        chargeDeplete:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteCop:
          $ref: '#/components/schemas/WltpGear'
        extraHigh:
          $ref: '#/components/schemas/WltpGear'
        high:
          $ref: '#/components/schemas/WltpGear'
        low:
          $ref: '#/components/schemas/WltpGear'
        medium:
          $ref: '#/components/schemas/WltpGear'
        total:
          $ref: '#/components/schemas/WltpGear'
        weighted:
          $ref: '#/components/schemas/WltpGear'
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' consumption.
    WltpElectricRange:
      type: object
      properties:
        all:
          $ref: '#/components/schemas/WltpAmount'
        equivalentAll:
          $ref: '#/components/schemas/WltpAmount'
      description: The allElectric and equivalentAllElectric range that a vehicle
        (pure-electic or hybrid) can reach
    WltpEmission:
      type: object
      properties:
        chargeDeplete:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteCop:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteWeighted:
          $ref: '#/components/schemas/WltpGear'
        extraHigh:
          $ref: '#/components/schemas/WltpGear'
        high:
          $ref: '#/components/schemas/WltpGear'
        low:
          $ref: '#/components/schemas/WltpGear'
        lowMid:
          $ref: '#/components/schemas/WltpGear'
        medium:
          $ref: '#/components/schemas/WltpGear'
        total:
          $ref: '#/components/schemas/WltpGear'
        weighted:
          $ref: '#/components/schemas/WltpGear'
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' emission.
    WltpGear:
      type: object
      properties:
        primaryGear:
          $ref: '#/components/schemas/WltpAmount'
        secondaryGear:
          $ref: '#/components/schemas/WltpAmount'
      description: The gear of a vehicle. A vehicle can have a primary and a secondary
        gear.
    WltpRange:
      type: object
      properties:
        high:
          $ref: '#/components/schemas/WltpElectricRange'
        low:
          $ref: '#/components/schemas/WltpElectricRange'
        lowMid:
          $ref: '#/components/schemas/WltpElectricRange'
        medium:
          $ref: '#/components/schemas/WltpElectricRange'
        total:
          $ref: '#/components/schemas/WltpElectricRange'
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' range.
  parameters:
    baumuster4prefixParam:
      name: baumuster4prefix
      in: query
      description: The first four digits of a baumuster are called baumuster4prefix
        e.g. '1760' for 'Berline' in France.
      schema:
        type: string
    baumusterParam:
      name: baumuster
      in: query
      description: This is a baumuster e.g. '176042' for 'A 180 Limousine' in Germany.
      schema:
        type: string
    bodyId:
      name: bodyId
      in: path
      description: This is a body id e.g. '1' for 'Limousine' in Germany.
      required: true
      schema:
        type: string
        default: "2"
    bodyIdParam:
      name: bodyId
      in: query
      description: This is a body id e.g. '1' for 'Limousine' in Germany.
      schema:
        type: string
        default: "2"
    classId:
      name: classId
      in: path
      description: This is a class id e.g. '176' for 'A-Klasse' in Germany.
      required: true
      schema:
        type: string
        default: "222"
    classIdParam:
      name: classId
      in: query
      description: This is a class id e.g. '176' for 'A-Class' in Germany.
      schema:
        type: string
        default: "222"
    componentCode:
      name: componentCode
      in: path
      description: The value of the requested component group, e.g. '245'.
      required: true
      schema:
        type: string
        default: "223"
    componentList:
      name: componentList
      in: path
      description: A string representing the changes, in other words a list of components
        that will be added and removed. The following syntax is used for the components
        to be added and the components to be removed. The added components e.g. '+I-950_L-890'
        and the removed components e.g. '-I-953_L-696' and the delimiter between the
        added and removed components is ','. In one components string '+I-950_L-890,-I-953_L-696'.
      required: true
      schema:
        type: string
        default: +L-197_P-518,-L-040_P-501
    componentTypes:
      name: componentTypes
      in: query
      description: |-
        A list of component types separated by a comma case insensitive. If nothing is defined all component types are returned. Allowed values are:
          - WHEELS
          - PAINTS
          - UPHOLSTERIES
          - TRIMS
          - PACKAGES
          - LINES
          - SPECIAL_EDITION
          - SPECIAL_EQUIPMENT
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - WHEELS
          - PAINTS
          - UPHOLSTERIES
          - TRIMS
          - PACKAGES
          - LINES
          - SPECIAL_EDITION
          - SPECIAL_EQUIPMENT
    configurationId:
      name: configurationId
      in: path
      description: Minimal string that identifies a configuration e.g. 'E-D15-D18-D41-D46-D49-D52-D53-D54-D59-D60-D71-F32-F36-F88-F98-G03-G05-G36-G56-I61-J53-J67-L08-M23-M70-N18-N62-N92-O76-Q29-Q56-Q79-Q92-S01-S05-S08-S63-S92-T05-T07-T62-T84-T88_I-953_L-696_P-001_S-152-160-161-171-258-290-292-294-351-360-411-440-442-470-472-475-485-520-533-538-560-570-573-580-584-58U-591-620-70B-808-888-893-B03-B16-K11-L18-R43-U60'.
        A codeType is only once within the configurationId e.g 'S-152-160-161' stands
        for the components with the componentId 'S-152', 'S-160' and 'S-161'. A new
        codeType is divided from the codes with a underscore e.g 'S-152-160-161_I-953_L-696'.
      required: true
      schema:
        type: string
        default: E-AB5-D09-D14-D53-D71-D80-L06-L19-M69-M70-M88-M94-N63-O16-O92-Q31-Q56-S09-S16_L-040_P-501_S-08U-09U-11R-12U-14U-160-16U-17U-223-231-233-235-23P-249-266-275-276-290-293-297-299-351-360-401-402-413-427-432-436-439-441-443-448-452-453-463-470-471-475-487-503-518-531-538-540-551-581-582-596-61U-628-642-70B-735-808-810-840-871-874-877-881-882-883-889-897-8U0-902-B59-H29-L2B-P07-P09-P17-P21-P34-P35-P47-P54-P64-R66-SZ4-U10-U12-U25
    countryParam:
      name: country
      in: query
      description: This is a ISO country string e.g. Germany 'DE' or Swiss 'CH'.
      schema:
        type: string
    fieldsFilter:
      name: fieldsFilter
      in: query
      description: Specifies which fields should be included in the result. If this
        filter is not used, per default all fields are returned.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    languageParam:
      name: language
      in: query
      description: This is a ISO language string e.g. 'de' and is spoken in Austria
        'AT', Germany 'DE' and Swiss 'CH'.
      schema:
        type: string
        default: de
    marketId:
      name: marketId
      in: path
      description: This is a ISO 3166 language country string e.g. 'de_DE' or 'en_GB'.
      required: true
      schema:
        pattern: ^[a-z]{2}_[A-Z]{2}$
        type: string
        default: de_DE
    modelId:
      name: modelId
      in: path
      description: Minimal string that identifies a model e.g. '176042_002'. If no
        nationalSalesType is available, the modelId only consists of the baumuster
        e.g. '176042'.
      required: true
      schema:
        type: string
        default: "222980000"
    nationalSalesTypeParam:
      name: nationalSalesType
      in: query
      description: This is the national sales type (NST) of a distinct baumuster.
        There is no predefined pattern for the NST, each market defines its NST. e.g.
        'E07' in France, 0001 in Germany and ZA1 in South Africa Using the NST markets
        can define market specific conditions. e.g. different initial configuration,
        etc.
      schema:
        type: string
    night:
      name: night
      in: query
      description: Set 'true', if you are looking for images with a darker background
        and the vehicle's headlights turned on. Default is 'false'.
      schema:
        type: boolean
        default: false
    onlineCode:
      name: onlineCode
      in: path
      description: OnlineCode string that identifies a vehicle configuration e.g.
        'M6882554'.
      required: true
      schema:
        type: string
        default: MQKCIHRI
    perspectives:
      name: perspectives
      in: query
      description: |-
        One or more perspectives as a comma separated String list e.g. 'EXT000,EXT010,INT1'.  The following perspectives are available:
          * EXT000-EXT350: EXT000 defines the front view, EXT010 defines a rotation of 10 degress and so forth.
          * INT1-INT4: These are the 4 available interior perspectives.

        The default value is EXT020,INT1 if no value is provided.
      schema:
        type: string
        default: EXT020,INT1
    productGroups:
      name: productGroups
      in: query
      description: |-
        Specifies to which product groups the vehicles belong which should be returned. The product groups are separated from each other by a comma and are case sensitive. Allowed values are:
          * PKW
          * VAN
          * SMART
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - PKW
          - VAN
          - SMART
    roofOpen:
      name: roofOpen
      in: query
      description: Set 'true', if you are looking for images with the roof open. This
        option is only valid for cabrios. Default is 'false'.
      schema:
        type: boolean
        default: false
  requestBodies:
    onlineCodeRequestBody:
      description: JSON object containing the modelId and the configurationId. ModelId
        is a minimal string that identifies a model e.g. '176042_002'. ConfigurationId
        is a minimal string that identifies a configuration e.g. 'E-D15-D18-...-R43-U60'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OnlineCodeRequestBody'
      required: true
x-default-apikey: Tyt82ndiKG0AdH8TCqe001ROh7RsGOKB
