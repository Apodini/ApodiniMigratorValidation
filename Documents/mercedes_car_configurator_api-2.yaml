openapi: 3.0.0
info:
  contact:
    name: The open API platform by Mercedes-Benz
  description: The Car Configurator API offers access to the Mercedes-Benz car configuration functions. It provides required reference data such as the masterdata of all Mercedes-Benz vehicles as well as functions to retrieve initial and changed configurations. In addition to that is is possible to save a newly created configuration so that it can be easily restored or shared with others.
  title: Car Configurator API
  version: '1.0'
tags:
  - description: 'Provide static reference data about cars like markets, bodies, classes, etc.'
    name: References
  - description: Select equipment and configure a car
    name: Configurations
  - description: Get images for the vehicle configuration and its components
    name: Images
  - description: Store and load configurations with an onlinecode
    name: Saved configurations
  - description: Get (possible healed) vehicles
    name: Vehicles
servers:
  - url: 'https://api.mercedes-benz.com/configurator/v1'
paths:
  /markets:
    get:
      parameters:
        - $ref: '#/components/parameters/languageParam'
        - $ref: '#/components/parameters/countryParam'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MarketsResponse'
                title: Markets
                type: array
          description: Successful response
        '204':
          description: No content found for requested parameters language and/or country
        '400':
          description: |-
            Invalid parameter was specified:
             * Language parameter is not valid
             * Country parameter is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Get all available `Markets`. Optional query params **language** or **country** may be used to filter the result.
      operationId: marketsGET
      summary: Get all available markets.
    x-swagger-router-controller: references
  '/markets/{marketId}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
          description: Successful response
        '400':
          description: MarketId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market not found for requested marketId
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Gets the `Market` for the given **marketId**. There are no query parameters to filter the result.
      operationId: marketGET
      summary: Get the market with the given marketId.
    x-swagger-router-controller: references
  '/markets/{marketId}/bodies':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/classIdParam'
        - $ref: '#/components/parameters/bodyIdParam'
        - $ref: '#/components/parameters/productGroups'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VehicleBody'
                title: VehicleBodies
                type: array
          description: Successful response
        '204':
          description: '''No content found for requested parameters classId, bodyId and/or productGroups'''
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * ProductGroups is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: 'Get all available `VehicleBodies` for the given **marketId**. Optional query params **classId** **bodyId** or **productGroups** may be used to filter the result and must conform to the pattern [0-9A-Z_-]+.'
      operationId: bodiesGET
      summary: Get all available bodies for the given marketId.
    x-swagger-router-controller: references
  '/markets/{marketId}/bodies/{bodyId}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/bodyId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleBody'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * BodyId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market or VehicleBody not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Get the `VehicleBody` for the given **marketId** and **bodyId**.
      operationId: bodyGET
      summary: Get the body for the given marketId and bodyId.
    x-swagger-router-controller: references
  '/markets/{marketId}/classes':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/classIdParam'
        - $ref: '#/components/parameters/bodyIdParam'
        - $ref: '#/components/parameters/productGroups'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VehicleClass'
                title: VehicleClasses
                type: array
          description: Successful response
        '204':
          description: '''No content found for requested parameters classId, bodyId and/or productGroups'''
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * Product group is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market has not been found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: 'Get all available `VehicleClasses` objects for the given **marketId**. Optional query params **classId**, **bodyId** or **productGroups** may be used to filter the result and must conform to the pattern [0-9A-Z_-]+.'
      operationId: classesGET
      summary: Get all available classes for the given marketId.
    x-swagger-router-controller: references
  '/markets/{marketId}/classes/{classId}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/classId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleClass'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market or VehicleClass not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Get the `VehicleClass` for the given **marketId** and **classId**.
      operationId: classGET
      summary: Get the class for the given marketId and classId.
    x-swagger-router-controller: references
  '/markets/{marketId}/models':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/classIdParam'
        - $ref: '#/components/parameters/bodyIdParam'
        - $ref: '#/components/parameters/baumuster4prefixParam'
        - $ref: '#/components/parameters/baumusterParam'
        - $ref: '#/components/parameters/nationalSalesTypeParam'
        - $ref: '#/components/parameters/productGroups'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VehicleModel'
                title: VehicleModels
                type: array
          description: Successful response
        '204':
          description: '''No content found for requested parameters classId, bodyId, baumuster4prefix, baumuster, nationalSalesType and/or productGroups'''
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ClassId is not valid
             * BodyId is not valid
             * Product group is not valid
             * baumuster4prefix is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: 'Get the available `VehicleModels` for the given **marketId**. Optional query params **classId**, **bodyId**, **baumuster4prefix**, **baumuster**, **nationalSalesType** or **productGroups** maybe used to filter the result. The baumuster4prefix must conform to the pattern [0-9]{4}.'
      operationId: modelsGET
      summary: Get all available models for the given marketId.
    x-swagger-router-controller: references
  '/markets/{marketId}/models/{modelId}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market or Model not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Get the `VehicleModel` object for the given **marketId** and **modelId**.
      operationId: modelGET
      summary: Get the model for the given marketId and modelId.
    x-swagger-router-controller: references
  '/markets/{marketId}/models/{modelId}/configurations/initial':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market or Model not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Configurations
      description: Get the initial `VehicleConfiguration` for the given **marketId** and **modelId**.
      operationId: modelConfigurationsGET
      summary: Get the initial configuration for the given marketId and modelId.
    x-swagger-router-controller: configurations
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: '''Market, Model or Configuration not found'''
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Configurations
      description: 'Get the `VehicleConfiguration` for the given **marketId**, **modelId** and **configurationId**.'
      operationId: modelConfigurationGET
      summary: 'Get the configuration for the given marketId, modelId and configurationId.'
    x-swagger-router-controller: configurations
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/selectables':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
        - $ref: '#/components/parameters/componentTypes'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleComponentTree'
          description: Successful response
        '204':
          description: No content found for requested componentTypes
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
             * ComponentTypes is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: '''Market, Model or Configuration not found'''
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Configurations
      description: 'Get the selectable `VehicleComponents` and the `ComponentCategories` of the `VehicleConfiguration` for the given **marketId**, **modelId** and **configurationId**. Optional query param **componentType** may be used to filter the result.'
      operationId: modelConfigurationSelectablesGET
      summary: 'Get the selectable components for the given marketId, modelId and configurationId.'
    x-swagger-router-controller: configurations
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/alternatives/{componentList}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
        - $ref: '#/components/parameters/componentList'
        - $ref: '#/components/parameters/fieldsFilter'
        - $ref: '#/components/parameters/maxAlternatives'
        - $ref: '#/components/parameters/fixedComponents'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VehicleAlternative'
                title: VehicleAlternatives
                type: array
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
             * ComponentList is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: '''Market, Model or Configuration not found'''
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Configurations
      description: 'Get the `VehicleAlternatives` for the given **marketId**, **modelId** and **configurationId** and the given **componentList** of changes.'
      operationId: modelConfigurationAlternativesGET
      summary: 'Get the alternatives for the given marketId, modelId, configurationId and componentList.'
    x-swagger-router-controller: configurations176042_002
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentsImagesResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: |-
        Returns URLs pointing to images in JPG format in the highest available resolution (depending on the component) of the vehicle's:
          * engine (1024x576 px),
          * rim (710x710 px),
          * trim (800x600 px),
          * paints (800x600 px),
          * upholstery (800x600 px) and
          * equipments (740x416 px).
      operationId: imageComponentsGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/engine':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns a URL pointing to an image of the vehicles engine.  These images are available in the resolution 1024x576 px.
      operationId: imageComponentsEngineGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/equipments':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllEquipmentImagesResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns URLs pointing to images of this vehicle's equipments. The images are available in the highest possible resolution (usually 740x416 px).
      operationId: imageComponentsEquipmentsGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/equipments/{componentCode}':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
        - $ref: '#/components/parameters/componentCode'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquipmentImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns URLs pointing to images of this vehicle's equipments. The images are available in the highest possible resolution (usually 740x416 px).
      operationId: imageComponentsEquipmentsByCodeGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/paint':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaintImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: 'Returns URLs pointing to images of this vehicles paint.  These images are available in resolution 800x600 px.  Note there might be two paints (e.g. Smart, ''paint'' for body panel and ''paint2'' for the tridion cell)'
      operationId: imageComponentsPaintGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/rim':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RimImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns a URL pointing to an image of the vehicles rim.  These images are available in the resolution 710x710 px.
      operationId: imageComponentsRimGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/trim':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrimImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns a URL pointing to an image of this vehicles trim.  These images are available in resolution 800x600 px.
      operationId: imageComponentsTrimGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/components/upholstery':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpholsteryImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns URLs pointing to images of the vehicle's upholsteries. Tge images are available in the highest possible resolution (usually 800x600 px).
      operationId: imageComponentsUpholsteryGET
    x-swagger-router-controller: images_components
  '/markets/{marketId}/models/{modelId}/configurations/{configurationId}/images/vehicle':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/configurationId'
        - $ref: '#/components/parameters/perspectives'
        - $ref: '#/components/parameters/roofOpen'
        - $ref: '#/components/parameters/night'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleImageResponse'
          description: Successful response
          headers:
            cache-control:
              description: Specifies the maximum amount of time (in seconds) an image is considered to be up-to-date.
              schema:
                default: max-age=86400
                type: string
        '204':
          description: No content could be found for your request.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: One of the provided parameters was invalid. Verify your query and inspect the global error object in the response for further information.
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: '''The requested marketId, modelId and/or configurationId not found.'''
        '429':
          description: Quota limit is exceeded
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageError'
          description: The server encountered an internal error.
      tags:
        - Images
      description: Returns URLs pointing to PNG images of a vehicle with a white background.
      operationId: imageVehicleGET
    x-swagger-router-controller: images_vehicle_configuration
  '/markets/{marketId}/onlinecode':
    post:
      parameters:
        - $ref: '#/components/parameters/marketId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineCode'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * ModelId is not valid
             * ConfigurationId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Configuration has not been found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Saved configurations
      description: Stores the configuration of the given **configurationId** and **modelId**
      operationId: onlineCodePOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnlineCodeRequestBody'
        description: JSON object containing the modelId and the configurationId. ModelId is a minimal string that identifies a model e.g. '2229801'. ConfigurationId is a minimal string that identifies a configuration e.g. 'AU-501_GC-427_LE-...-LS2-PZB'
        required: true
      summary: Stores the configuration of the given configurationId and modelId
    x-swagger-router-controller: saved_configurations
  '/markets/{marketId}/onlinecode/{onlineCode}':
    get:
      parameters:
        - $ref: '#/components/parameters/onlineCode'
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleConfiguration'
          description: Successful response
        '400':
          description: |-
            Invalid parameter was specified:
             * MarketId is not valid
             * OnlineCode is not valid
             * Fields is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Configuration or Market has not been found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - Saved configurations
      description: Gets the configuration for the given marketId and onlineCode.
      operationId: onlineCodeGET
      summary: Get the configuration of the given onlineCode and marketId.
    x-swagger-router-controller: saved_configurations
  '/markets/{marketId}/productgroups':
    get:
      parameters:
        - $ref: '#/components/parameters/marketId'
        - $ref: '#/components/parameters/fieldsFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productGroupResponse'
          description: Successful response
        '400':
          description: MarketId is not valid
        '401':
          description: |-
            Unauthorized:
              * Failed to resolve API Key query parameter
              * Invalid API Key
        '403':
          description: Forbidden
        '404':
          description: Market not found
        '429':
          description: Quota limit is exceeded
        '500':
          description: An Error occurred on the server side
      tags:
        - References
      description: Get all configured active product groups for the given **marketId**.
      operationId: productGroupsGET
      summary: Get all configured active product groups for the given marketId.
    x-swagger-router-controller: references
  '/vehicles/{vehicleId}':
    get:
      tags:
        - Vehicles
      summary: Retrieves the (possibly healed) vehicle of the given vehicleId.
      description: Retrieves the Vehicle for the given **vehicleId**. If the configuration was invalid or incomplete an automatic healing from the kernel is done. The kernel will always return a valid configuration!
      operationId: getVehicles
      parameters:
        - name: vehicleId
          in: path
          description: Minimal string that identifies a vehicle e.g. 'de_DE__1770871__E-G03-L08-N55_I-953_L-589_P-001_S-058-08U-09U-15U-243-258-270-292-294-345-351-362-411-428-440-475-485-504-545-580-58U-620-70B-7U1-808-893-969-998-B59-L3A-R00-R01-U10-U54-V08'.
          required: true
          schema:
            pattern: '^[a-zA-Z]{2}_[a-zA-Z]{2}__[0-9]{6,8}(_[0-9A-Z]{3})?__(((([a-zA-Z0-9]{1,2}(-[a-zA-Z0-9#]{1,7})+)){1})(_([a-zA-Z0-9]{1,2}(-[a-zA-Z0-9#]{1,7})+)){0,})$'
            type: string
        - name: views
          in: query
          description: |-
            Specifies what kind of additional data should be returned. The data views are separated from each other by a comma.

            |parameter|Description|
            |---|---|
            |TECH|Data view of technical information of a vehicle|
            |DESC|View with component descriptions|
            |IDS|View with component IDS for configuration|
            |MULTI_DESC|View with detailed component descriptions|
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - IDS
                - DESC
                - TECH
                - MULTI_DESC
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: VehicleId not valid
        '404':
          description: VehicleId has not been found
    x-swagger-router-controller: vehicles
components:
  parameters:
    baumuster4prefixParam:
      description: The first four digits of a baumuster are called baumuster4prefix e.g. '1760' for 'Berline' in France.
      in: query
      name: baumuster4prefix
      required: false
      schema:
        type: string
    baumusterParam:
      description: This is a baumuster e.g. '176042' for 'A 180 Limousine' in Germany.
      in: query
      name: baumuster
      required: false
      schema:
        type: string
    bodyId:
      description: |-
        This is a body id e.g. 'LIMOUSINE' for 'Limousine' in Germany. Available values are:
        - 4-TUERER COUPE
        - CABRIOLET
        - COUPE
        - DOPPELKABINE
        - GELAENDEWAGEN
        - KOMPAKT-LIMOUSINE
        - LIMOUSINE
        - LIMOUSINE_LANG
        - LUXUSKOMBI
        - OFFROADER
        - ROADSTER
        - SHOOTING BRAKE
        - SPORTS TOURER
        - T-MODELL
      in: path
      name: bodyId
      required: true
      schema:
        example: LIMOUSINE_LANG
        type: string
    bodyIdParam:
      description: |-
        This is a body id e.g. 'LIMOUSINE' for 'Limousine' in Germany. Available values are:
        - 4-TUERER COUPE
        - CABRIOLET
        - COUPE
        - DOPPELKABINE
        - GELAENDEWAGEN
        - KOMPAKT-LIMOUSINE
        - LIMOUSINE
        - LIMOUSINE_LANG
        - LUXUSKOMBI
        - OFFROADER
        - ROADSTER
        - SHOOTING BRAKE
        - SPORTS TOURER
        - T-MODELL
      in: query
      name: bodyId
      required: false
      schema:
        example: LIMOUSINE_LANG
        type: string
    classId:
      description: |-
        This is a class id e.g. 'A-KLASSE' for 'A-Klasse' in Germany. Available values are:
         - A-KLASSE
         - B-KLASSE
         - C-KLASSE
         - CLA-KLASSE
         - CLS-KLASSE
         - E-KLASSE
         - EQC-KLASSE
         - FORFOUR
         - FORTWO
         - G-KLASSE
         - GLA-KLASSE
         - GLB-KLASSE
         - GLC-KLASSE
         - GLE-KLASSE
         - GL-KLASSE
         - GT-KLASSE
         - S-KLASSE
         - SLK-KLASSE
         - SL-KLASSE
         - V-KLASSE
         - X-KLASSE
      in: path
      name: classId
      required: true
      schema:
        example: S-KLASSE
        type: string
    classIdParam:
      description: |-
        This is a class id e.g. 'A-KLASSE' for 'A-Klasse' in Germany. Available values are:
         - A-KLASSE
         - B-KLASSE
         - C-KLASSE
         - CLA-KLASSE
         - CLS-KLASSE
         - E-KLASSE
         - EQC-KLASSE
         - FORFOUR
         - FORTWO
         - G-KLASSE
         - GLA-KLASSE
         - GLB-KLASSE
         - GLC-KLASSE
         - GLE-KLASSE
         - GL-KLASSE
         - GT-KLASSE
         - S-KLASSE
         - SLK-KLASSE
         - SL-KLASSE
         - V-KLASSE
         - X-KLASSE
      in: query
      name: classId
      required: false
      schema:
        example: S-KLASSE
        type: string
    componentCode:
      description: 'The value of the requested component group, e.g. ''245''.'
      in: path
      name: componentCode
      required: true
      schema:
        example: '223'
        type: string
    componentList:
      description: 'A string representing the changes, in other words a list of components that will be added and removed. The following syntax is used for the components to be added and the components to be removed. The added components e.g. ''+LU-197_AU-518'' and the removed components e.g. ''-LU-040_AU-501'' and the delimiter between the added and removed components is '',''. In one components string ''+LU-197_AU-518,-LU-040_AU-501''.'
      in: path
      name: componentList
      required: true
      schema:
        example: '+LU-197_AU-518,-LU-040_AU-501'
        type: string
    componentTypes:
      description: |-
        A list of component types separated by a comma case insensitive. If nothing is defined all component types are returned. Allowed values are:
          - WHEELS
          - PAINTS
          - UPHOLSTERIES
          - TRIMS
          - PACKAGES
          - LINES
          - SPECIAL_EDITION
          - SPECIAL_EQUIPMENT
      in: query
      name: componentTypes
      required: false
      schema:
        items:
          example: 'PAINTS,UPHOLSTERIES'
          enum:
            - WHEELS
            - PAINTS
            - UPHOLSTERIES
            - TRIMS
            - PACKAGES
            - LINES
            - SPECIAL_EDITION
            - SPECIAL_EQUIPMENT
          type: string
        type: array
    configurationId:
      description: Minimal string that identifies a configuration e.g. 'AU-501_GC-427_LE-L_LU-040_MJ-800_PC-23P-P07-P09-P17-P21-P34-P35-P47-P54-P64_PS-064#-121#-124#-241#-290#-292#-345#-352#-516#-518#-538#-953#-H71#-M11#-S18#_SA-01U-02B-02U-08U-09U-11R-14U-16U-17U-223-231-233-235-249-266-275-276-293-297-351-362-367-401-402-413-432-439-448-452-453-463-475-487-501-513-531-540-546-551-581-582-596-61U-628-642-70B-735-79B-810-840-871-874-877-881-882-883-889-897-8U0-902-915-927-969-H29-K11-K32-K33-K34-L2B-R01-R66-U01-U10-U12-U25-U60_SC-2U8-3U1-502-51B-54V-6P5-8U6-8U8-998-B10-K15-K31-LS2-PZB'. A new codeType is divided from the codes with a underscore e.g 'LU-197_AU-518'.
      in: path
      name: configurationId
      required: true
      schema:
        example: AU-501_GC-427_LE-L_LU-040_MJ-800_PC-23P-P07-P09-P17-P21-P34-P35-P47-P54-P64_PS-064#-121#-124#-241#-290#-292#-345#-352#-516#-518#-538#-953#-H71#-M11#-S18#_SA-01U-02B-02U-08U-09U-11R-14U-16U-17U-223-231-233-235-249-266-275-276-293-297-351-362-367-401-402-413-432-439-448-452-453-463-475-487-501-513-531-540-546-551-581-582-596-61U-628-642-70B-735-79B-810-840-871-874-877-881-882-883-889-897-8U0-902-915-927-969-H29-K11-K32-K33-K34-L2B-R01-R66-U01-U10-U12-U25-U60_SC-2U8-3U1-502-51B-54V-6P5-8U6-8U8-998-B10-K15-K31-LS2-PZB
        type: string
    countryParam:
      description: This is a ISO country string e.g. Germany 'DE' or Swiss 'CH'.
      in: query
      name: country
      required: false
      schema:
        example: DE
        type: string
    fieldsFilter:
      description: 'Specifies which fields should be included in the result. If this filter is not used, per default all fields are returned.'
      in: query
      name: fieldsFilter
      required: false
      schema:
        items:
          type: string
        type: array
    maxAlternatives:
      description: Specifies the maximum number of alternatives to return (valid range is from 1 to 20).
      in: query
      name: maxAlternatives
      required: false
      schema:
        maximum: 20
        minimum: 1
        type: integer
        format: int32
    fixedComponents:
      description: A list of components that are fixed (and cannot be removed) during this operation. The syntax looks like 'S-L12S' for a single component or '0-LG2_S-L12S' for a list of components. This feature is currently available for Vans only.
      in: query
      name: fixedComponents
      required: false
      schema:
        pattern: '^(((([a-zA-Z0-9]{1,2}(-[a-zA-Z0-9#]{1,7})+)){1})(_([a-zA-Z0-9]{1,2}(-[a-zA-Z0-9#]{1,7})+)){0,})$'
        type: string
    languageParam:
      description: 'This is a ISO language string e.g. ''de'' and is spoken in Austria ''AT'', Germany ''DE'' and Swiss ''CH''.'
      in: query
      name: language
      required: false
      schema:
        example: de
        type: string
    marketId:
      description: This is a ISO 3166 language country string e.g. 'de_DE' or 'en_GB'.
      in: path
      name: marketId
      required: true
      schema:
        example: de_DE
        pattern: '^[a-z]{2}_[A-Z]{2}$'
        type: string
    modelId:
      description: 'Minimal string that identifies a model e.g. ''2229801''. If no nationalSalesType is available, the modelId only consists of the baumuster e.g. ''222980''.'
      in: path
      name: modelId
      required: true
      schema:
        example: '2229801'
        type: string
    nationalSalesTypeParam:
      description: 'This is the national sales type (NST) of a distinct baumuster. There is no predefined pattern for the NST, each market defines its NST. e.g. ''E07'' in France, 0001 in Germany and ZA1 in South Africa Using the NST markets can define market specific conditions. e.g. different initial configuration, etc.'
      in: query
      name: nationalSalesType
      required: false
      schema:
        type: string
    night:
      description: 'Set ''true'', if you are looking for images with a darker background and the vehicle''s headlights turned on. Default is ''false''.'
      in: query
      name: night
      required: false
      schema:
        example: false
        type: boolean
    onlineCode:
      description: OnlineCode string that identifies a vehicle configuration e.g. 'M6882554'.
      in: path
      name: onlineCode
      required: true
      schema:
        example: MQKCIHRI
        type: string
    perspectives:
      description: |-
        One or more perspectives as a comma separated String list e.g. 'EXT000,EXT010,INT1'.  The following perspectives are available:
          * EXT000-EXT350: EXT000 defines the front view, EXT010 defines a rotation of 10 degress and so forth.
          * INT1-INT4: These are the 4 available interior perspectives.

        The default value is EXT020,INT1 if no value is provided.
      in: query
      name: perspectives
      required: false
      schema:
        example: 'EXT020,INT1'
        type: string
    productGroups:
      description: |-
        Specifies to which product groups the vehicles belong which should be returned. The product groups are separated from each other by a comma and are case sensitive. Allowed values are:
          * PKW
          * GELAENDEWAGEN
          * VAN
          * SPRINTER
          * CITAN
          * SMART
      in: query
      name: productGroups
      required: false
      schema:
        example: PKW
        items:
          enum:
            - PKW
            - GELAENDEWAGEN
            - VAN
            - SPRINTER
            - CITAN
            - SMART
          type: string
        type: array
    roofOpen:
      description: 'Set ''true'', if you are looking for images with the roof open. This option is only valid for cabrios. Default is ''false''.'
      in: query
      name: roofOpen
      required: false
      schema:
        example: false
        type: boolean
  schemas:
    Vehicle:
      required:
        - healed
        - links
        - vehicleConfiguration
        - vehicleModel
        - vehicleSortId
      type: object
      properties:
        vehicleSortId:
          type: integer
          format: int32
        healed:
          type: boolean
        vehicleModel:
          $ref: '#/components/schemas/VehicleModel'
        vehicleConfiguration:
          $ref: '#/components/schemas/VehicleConfiguration'
        links:
          type: object
          additionalProperties:
            type: string
    ActiveDriveCycle:
      description: 'Defines the active drivecycle. example: LEGACY'
      enum:
        - WLTP
        - NEDC
        - CH
        - LEGACY
      type: string
    AllEquipmentImagesResponse:
      description: 'The response object holds either an error object, in case that the request was malformed, or an equipments object containing a map with all equipment urls for the requested vehicle with the equipment codes as map keys.'
      properties:
        equipments:
          $ref: '#/components/schemas/EquipmentImageMap'
      required:
        - equipments
      type: object
    Amount:
      description: Holds a value and unit.
      properties:
        unit:
          type: string
        value:
          type: number
      required:
        - value
      type: object
    ChargeTime:
      description: Holds the different charge times of a electric vehicle.
      properties:
        chargeTimeACLow:
          $ref: '#/components/schemas/Amount'
        chargeTimeACMedium:
          $ref: '#/components/schemas/Amount'
        chargeTimeDCHigh:
          $ref: '#/components/schemas/Amount'
      type: object
    CodeImage:
      description: The code image contains an equipment code with a corresponding image URL.
      properties:
        code:
          description: The equipment code for the corresponding image.
          type: string
        url:
          description: An URL pointing to an image of an equipment.
          type: string
      required:
        - code
        - url
      type: object
    ComponentsImages:
      description: A set of URLs pointing to images of the vehicle in low resolution.
      properties:
        engine:
          $ref: '#/components/schemas/ImageUrl'
        equipments:
          $ref: '#/components/schemas/EquipmentImageMap'
        paint:
          $ref: '#/components/schemas/PaintsImages'
        rim:
          $ref: '#/components/schemas/CodeImage'
        trim:
          $ref: '#/components/schemas/CodeImage'
        upholstery:
          $ref: '#/components/schemas/CodeImage'
      type: object
    ComponentsImagesResponse:
      description: Components images object
      properties:
        components:
          $ref: '#/components/schemas/ComponentsImages'
      type: object
    DataSupply:
      description: Represent a data supplier.
      enum:
        - PPM
        - ABI
        - MD
      properties:
        name:
          type: string
      required:
        - name
      type: object
    Dimensions:
      description: The dimensions of the vehicle.
      properties:
        bootCapacityMax:
          $ref: '#/components/schemas/Amount'
        bootCapacityMin:
          $ref: '#/components/schemas/Amount'
        height:
          $ref: '#/components/schemas/Amount'
        length:
          $ref: '#/components/schemas/Amount'
        luggageSpaceFrontSeat:
          $ref: '#/components/schemas/Amount'
        luggageSpaceRearSeat:
          $ref: '#/components/schemas/Amount'
        turnCircle:
          $ref: '#/components/schemas/Amount'
        width:
          $ref: '#/components/schemas/Amount'
      required:
        - length
        - width
        - height
      type: object
    DriveConcept:
      description: The kind of drive concept of a vehicle. Where UNDEFINED is used as the default and/or error case.
      enum:
        - COMBUSTOR
        - HYBRID
        - ELECTRIC
        - FUELCELL
        - UNDEFINED
      type: string
    DriveCycleAmount:
      description: The drive cycle specific values.
      properties:
        individual:
          $ref: '#/components/schemas/Amount'
        max:
          $ref: '#/components/schemas/Amount'
        min:
          $ref: '#/components/schemas/Amount'
      required:
        - individual
        - min
        - max
      type: object
    EnergyEfficiencyCategory:
      description: The energy efficiency category specific values.
      properties:
        individual:
          type: string
        max:
          type: string
        min:
          type: string
      required:
        - individual
        - min
        - max
      type: object
    Engine:
      description: All technical information about a specific engine.
      properties:
        alternativeFuelType:
          $ref: '#/components/schemas/FuelType'
        batteryCapacity:
          $ref: '#/components/schemas/Amount'
        batteryType:
          type: string
        capacity:
          $ref: '#/components/schemas/Amount'
        chargingCapacityAC:
          $ref: '#/components/schemas/Amount'
        chargingCapacityDC:
          $ref: '#/components/schemas/Amount'
        compressionRatio:
          $ref: '#/components/schemas/Amount'
        cylinder:
          type: string
        cylinderArrangement:
          $ref: '#/components/schemas/Amount'
        cylinderValves:
          $ref: '#/components/schemas/Amount'
        driveConcept:
          $ref: '#/components/schemas/DriveConcept'
        emissionStandard:
          type: string
        engineConcept:
          $ref: '#/components/schemas/EngineConcept'
        engineSpeedNominalOutputElectricMax:
          $ref: '#/components/schemas/Amount'
        engineSpeedNominalOutputElectricMin:
          $ref: '#/components/schemas/Amount'
        engineSpeedNominalOutputMax:
          $ref: '#/components/schemas/Amount'
        engineSpeedNominalOutputMin:
          $ref: '#/components/schemas/Amount'
        engineSpeedNominalSystemOutputMax:
          $ref: '#/components/schemas/Amount'
        engineSpeedNominalSystemOutputMin:
          $ref: '#/components/schemas/Amount'
        engineTorque:
          $ref: '#/components/schemas/Amount'
        fuelEconomy:
          $ref: '#/components/schemas/FuelEconomy'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        nominalSystemOutputMaxHp:
          $ref: '#/components/schemas/Amount'
        nominalSystemOutputMaxKw:
          $ref: '#/components/schemas/Amount'
        nominalTorque:
          $ref: '#/components/schemas/Amount'
        powerHp:
          $ref: '#/components/schemas/Amount'
        powerHybridExtensionHp:
          $ref: '#/components/schemas/Amount'
        powerHybridExtensionKw:
          $ref: '#/components/schemas/Amount'
        powerKw:
          $ref: '#/components/schemas/Amount'
        torqueNominalSystemOutputMax:
          $ref: '#/components/schemas/Amount'
        typeOfPropulsion:
          type: string
      required:
        - fuelType
        - alternativeFuelType
        - engineConcept
        - driveConcept
      type: object
    EngineConcept:
      description: The kind of fuel used by an engine of a vehicle determines the engine type. Where UNDEFINED is used as the default and/or error case.
      enum:
        - MONO_REGULAR
        - MONO_DIESEL
        - MONO_GAS
        - MONO_ELECTRIC
        - MONO_FUELCELL
        - BI_NGT
        - BI_NGD
        - BI_MILD
        - BI_PLUGIN
        - MONO_UNDEFINED
        - BI_UNDEFINED
        - BI_HYBRID_UNDEFINED
        - BI_COMBUSTION_UNDEFINED
        - UNDEFINED
      type: string
    EngineImageResponse:
      description: An engine image object
      properties:
        engine:
          $ref: '#/components/schemas/ImageUrl'
      type: object
    EquipmentImageMap:
      additionalProperties:
        $ref: '#/components/schemas/ImageUrl'
      description: 'The map holds either an error object, in case that the request was malformed, or an equipments object containing a map with all equipment image urls for the requested vehicle with the equipment codes as map keys.'
      type: object
    EquipmentImageResponse:
      description: An equipment image object
      properties:
        equipment:
          $ref: '#/components/schemas/ImageUrl'
      type: object
    FuelEconomy:
      description: This is for the fuel consumption holding a value and unit.
      properties:
        consumptionEquivalent:
          $ref: '#/components/schemas/DriveCycleAmount'
        consumptionOfElectricityMax:
          $ref: '#/components/schemas/Amount'
        consumptionOfElectricityMin:
          $ref: '#/components/schemas/Amount'
        electricConsumptionCombined:
          $ref: '#/components/schemas/DriveCycleAmount'
        emissionCO2Individual:
          $ref: '#/components/schemas/Amount'
        emissionCO2Max:
          $ref: '#/components/schemas/Amount'
        emissionCO2Min:
          $ref: '#/components/schemas/Amount'
        emissionForFuelSupply:
          $ref: '#/components/schemas/DriveCycleAmount'
        fuelConsumptionCityIndividual:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCityMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCityMin:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCombinedIndividual:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCombinedMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionCombinedMin:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionElectricity:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionOverlandIndividual:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionOverlandMax:
          $ref: '#/components/schemas/Amount'
        fuelConsumptionOverlandMin:
          $ref: '#/components/schemas/Amount'
        gasConsumptionCombined:
          $ref: '#/components/schemas/DriveCycleAmount'
        hydroCarbonEmission:
          $ref: '#/components/schemas/Amount'
      type: object
    FuelType:
      description: The kind of fuel used by an engine of a vehicle. Where UNDEFINED is used as the default and/or error case.
      enum:
        - NORMAL
        - SUPER
        - SUPERPLUS
        - DIESEL
        - HGAS
        - GAS
        - ELECTRIC
        - FUELCELL
        - UNDEFINED
      type: string
    ImageComponentLink:
      description: Link to VIM image API.
      properties:
        imageapi_component:
          type: string
      required:
        - imageapi_component
      type: object
    ImageError:
      description: The error object containing detailed information about the error.
      properties:
        code:
          type: string
        message:
          type: string
        uuid:
          type: string
      type: object
    ImageUrl:
      description: An object describing an image URL that could be a vehicle image for example. This includes the URL to the content.
      properties:
        url:
          type: string
      type: object
    ImageUrlWithError:
      description: 'An object describing an image URL that could be a vehicle image for example. This includes the URL to the content. In case of an error that is related to the requested image material (e.g. perspective), an error object is present containing further information.'
      properties:
        error:
          $ref: '#/components/schemas/ImageError'
        url:
          type: string
      type: object
    LuggageSpace:
      description: Holds the luggage space values.
      properties:
        luggageSpaceClosed:
          $ref: '#/components/schemas/Amount'
        luggageSpaceFrontSeat:
          $ref: '#/components/schemas/Amount'
        luggageSpaceRearSeat:
          $ref: '#/components/schemas/Amount'
      type: object
    Market:
      description: Represent a market (aka country) with a specific country and a language.
      properties:
        country:
          type: string
        language:
          type: string
        marketId:
          type: string
      required:
        - marketId
        - country
        - language
        - _links
      type: object
    MarketsResponse:
      allOf:
        - $ref: '#/components/schemas/Market'
        - properties:
            _links:
              $ref: '#/components/schemas/SelfReferencesLinks'
          type: object
    Nedc:
      description: Holds all relevant informations for the Nedc 'New European Drive Cycle'.
      properties:
        consumption:
          $ref: '#/components/schemas/NedcConsumption'
        electricRange:
          $ref: '#/components/schemas/DriveCycleAmount'
        emission:
          $ref: '#/components/schemas/NedcEmission'
        weight:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - consumption
        - emission
        - weight
      type: object
    NedcConsumption:
      description: The Nedc 'New European Drive Cycle' consumption.
      properties:
        city:
          $ref: '#/components/schemas/NedcGear'
        combined:
          $ref: '#/components/schemas/NedcGear'
        country:
          $ref: '#/components/schemas/NedcGear'
        electric:
          $ref: '#/components/schemas/DriveCycleAmount'
        weighted:
          $ref: '#/components/schemas/NedcGear'
      required:
        - city
        - country
        - combined
      type: object
    NedcEmission:
      description: The Nedc 'New European Drive Cycle' emission.
      properties:
        city:
          $ref: '#/components/schemas/NedcGear'
        combined:
          $ref: '#/components/schemas/NedcGear'
        country:
          $ref: '#/components/schemas/NedcGear'
        weighted:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - city
        - country
        - combined
      type: object
    NedcGear:
      description: The gear of a vehicle. A vehicle can have a primary and a secondary gear.
      properties:
        primaryGear:
          $ref: '#/components/schemas/DriveCycleAmount'
        secondaryGear:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - primaryGear
      type: object
    OnlineCode:
      description: The onlineCode is a unique identifier for a stored vehicle configuration.
      properties:
        onlineCode:
          description: String that identifies the online code
          type: string
      required:
        - onlineCode
      type: object
    OnlineCodeRequestBody:
      description: JSON object containing the modelId and the configurationId
      example:
        configurationId: AU-501_GC-427_LE-L_LU-040_MJ-800_PC-23P-P07-P09-P17-P21-P34-P35-P47-P54-P64_PS-064#-121#-124#-241#-290#-292#-345#-352#-516#-518#-538#-953#-H71#-M11#-S18#_SA-01U-02B-02U-08U-09U-11R-14U-16U-17U-223-231-233-235-249-266-275-276-293-297-351-362-367-401-402-413-432-439-448-452-453-463-475-487-501-513-531-540-546-551-581-582-596-61U-628-642-70B-735-79B-810-840-871-874-877-881-882-883-889-897-8U0-902-915-927-969-H29-K11-K32-K33-K34-L2B-R01-R66-U01-U10-U12-U25-U60_SC-2U8-3U1-502-51B-54V-6P5-8U6-8U8-998-B10-K15-K31-LS2-PZB
        modelId: '2229801'
      properties:
        configurationId:
          description: String that identifies a configuration. e.g. AU-501_GC-427_LE-L_LU-040_MJ-800_PC-23P-P07-P09-P17-P21-P34-P35-P47-P54-P64_PS-064#-121#-124#-241#-290#-292#-345#-352#-516#-518#-538#-953#-H71#-M11#-S18#_SA-01U-02B-02U-08U-09U-11R-14U-16U-17U-223-231-233-235-249-266-275-276-293-297-351-362-367-401-402-413-432-439-448-452-453-463-475-487-501-513-531-540-546-551-581-582-596-61U-628-642-70B-735-79B-810-840-871-874-877-881-882-883-889-897-8U0-902-915-927-969-H29-K11-K32-K33-K34-L2B-R01-R66-U01-U10-U12-U25-U60_SC-2U8-3U1-502-51B-54V-6P5-8U6-8U8-998-B10-K15-K31-LS2-PZB
          type: string
        modelId:
          description: String that identifies a model. e.g. '176042_002'
          type: string
      required:
        - modelId
        - configurationId
      type: object
    PaintImageResponse:
      description: A paint image object
      properties:
        paint:
          $ref: '#/components/schemas/PaintsImages'
      type: object
    PaintsImages:
      description: The upper (paint2) and the lower (paint1) paint of the vehicle.
      properties:
        paint1:
          $ref: '#/components/schemas/CodeImage'
        paint2:
          $ref: '#/components/schemas/CodeImage'
      type: object
    PriceInformation:
      description: 'The prices, installment price, taxes and ISO currency of a vehicle.'
      properties:
        currency:
          type: string
        instalmentPrice:
          type: number
        netPrice:
          type: number
        price:
          type: number
        taxes:
          items:
            $ref: '#/components/schemas/Tax'
          type: array
      required:
        - price
        - netPrice
        - currency
        - taxes
      type: object
    ProductGroup:
      description: Represent a product group.
      enum:
        - PKW
        - GELAENDEWAGEN
        - VAN
        - SPRINTER
        - CITAN
        - SMART
      type: string
    RimImageResponse:
      description: A rim image object
      properties:
        rim:
          $ref: '#/components/schemas/CodeImage'
      type: object
    SelfConfigurationLinks:
      description: Links to self and configuration resources.
      properties:
        configuration:
          type: string
        self:
          type: string
      required:
        - self
        - configuration
      type: object
    SelfLink:
      description: Links to self.
      properties:
        self:
          type: string
      required:
        - self
      type: object
    SelfModelLinks:
      description: Links to self and models resources.
      properties:
        models:
          type: string
        self:
          type: string
      required:
        - self
        - models
      type: object
    SelfReferencesLinks:
      description: 'Market specific links to the specific resources. i.e. classes, bodies, etc.'
      properties:
        bodies:
          type: string
        classes:
          type: string
        models:
          type: string
        productgroups:
          type: string
        self:
          type: string
      required:
        - self
        - classes
        - bodies
        - models
        - productgroups
      type: object
    SelfSelectablesImageVehicleLinks:
      description: Links to self and image resources.
      properties:
        imageapi_vehicle:
          type: string
        selectables:
          type: string
        self:
          type: string
      required:
        - self
        - selectables
        - imageapi_vehicle
      type: object
    Tax:
      description: The country specific tax information.
      properties:
        amount:
          type: number
        baseAmount:
          type: number
        charge:
          type: number
        id:
          type: string
        rate:
          type: number
      required:
        - id
        - amount
        - baseAmount
        - charge
        - rate
      type: object
    TechnicalInformation:
      description: Contains all technical information calculated using BDAs.
      properties:
        acceleration:
          $ref: '#/components/schemas/Amount'
        activeDriveCycle:
          $ref: '#/components/schemas/ActiveDriveCycle'
        actualMass:
          $ref: '#/components/schemas/Amount'
        capacityWithReserve:
          $ref: '#/components/schemas/Amount'
        chargeTime:
          $ref: '#/components/schemas/ChargeTime'
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        doors:
          type: number
        dragCoefficient:
          type: string
        energyEfficiencyCategory:
          $ref: '#/components/schemas/EnergyEfficiencyCategory'
        energyEfficiencyClass:
          type: string
        engine:
          $ref: '#/components/schemas/Engine'
        kerbWeight:
          $ref: '#/components/schemas/Amount'
        luggageSpace:
          $ref: '#/components/schemas/LuggageSpace'
        nedc:
          $ref: '#/components/schemas/Nedc'
        payload:
          $ref: '#/components/schemas/Amount'
        permanentRoofLoad:
          $ref: '#/components/schemas/Amount'
        reserveTankCapacity:
          $ref: '#/components/schemas/Amount'
        seats:
          type: number
        topSpeed:
          $ref: '#/components/schemas/Amount'
        transmission:
          $ref: '#/components/schemas/Transmission'
        tyres:
          $ref: '#/components/schemas/Tyres'
        weights:
          $ref: '#/components/schemas/Weights'
        wltp:
          $ref: '#/components/schemas/Wltp'
      required:
        - engine
        - transmission
      type: object
    Transmission:
      description: The transmission of the vehicle configuration.
      properties:
        code:
          type: string
        codeType:
          type: string
        finalDriveRatio:
          $ref: '#/components/schemas/Amount'
        name:
          type: string
        transmissionType:
          type: string
      required:
        - code
        - codeType
        - name
      type: object
    TrimImageResponse:
      description: A trim image object
      properties:
        trim:
          $ref: '#/components/schemas/CodeImage'
      type: object
    Tyres:
      description: Holds different infos for the tyres of the vehicle.
      properties:
        backAxle:
          type: string
        backTyres:
          type: string
        frontAxle:
          type: string
        frontBrakes:
          type: string
        frontSuspension:
          type: string
        frontTyres:
          type: string
        rearBrakes:
          type: string
        rearSuspension:
          type: string
      type: object
    UpholsteryImageResponse:
      description: An upholstery image object
      properties:
        upholstery:
          $ref: '#/components/schemas/CodeImage'
      type: object
    VehicleAlternative:
      description: A vehicle alternative.
      properties:
        _links:
          $ref: '#/components/schemas/SelfSelectablesImageVehicleLinks'
        addedComponents:
          items:
            $ref: '#/components/schemas/VehicleComponent'
          type: array
        configurationId:
          type: string
        marketId:
          type: string
        modelId:
          type: string
        priceInformation:
          $ref: '#/components/schemas/PriceInformation'
        removedComponents:
          items:
            $ref: '#/components/schemas/VehicleComponent'
          type: array
        updatedComponents:
          items:
            $ref: '#/components/schemas/VehicleComponent'
          type: array
      required:
        - marketId
        - modelId
        - configurationId
        - addedComponents
        - removedComponents
        - updatedComponents
        - priceInformation
        - _links
      type: object
    VehicleBody:
      description: 'The body of a Vehicle, e.g. ''Limousine''.'
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        bodyId:
          type: string
        bodyName:
          type: string
      required:
        - bodyId
        - bodyName
        - _links
      type: object
    VehicleClass:
      description: 'The class of a Vehicle, e.g. ''A-Class''.'
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        classId:
          type: string
        className:
          type: string
      required:
        - classId
        - className
        - _links
      type: object
    VehicleComponent:
      description: A vehicle component.
      properties:
        _links:
          $ref: '#/components/schemas/ImageComponentLink'
        code:
          type: string
        codeType:
          type: string
        componentSortId:
          type: number
        componentType:
          $ref: '#/components/schemas/VehicleComponentType'
        description:
          description: HTML elements can be present
          type: string
        fixed:
          description: Cannot changed by the customer
          type: boolean
        hidden:
          description: 'Hidden, should not be displayed to the customer, not relevant for the customer'
          type: boolean
        id:
          type: string
        images:
          additionalProperties:
            items:
              $ref: '#/components/schemas/VehicleComponentImage'
            type: array
          properties:
            imageSize:
              $ref: '#/components/schemas/VehicleComponentImage'
          type: object
        includedComponents:
          $ref: '#/components/schemas/VehicleComponentTree'
        name:
          type: string
        priceInformation:
          $ref: '#/components/schemas/PriceInformation'
        pseudoCode:
          description: Not relevant for the customer
          type: boolean
        selected:
          description: Selected by the customer
          type: boolean
        standard:
          description: Standard equipment
          type: boolean
      required:
        - id
        - componentSortId
        - name
        - code
        - codeType
        - componentType
        - priceInformation
        - standard
        - selected
        - fixed
        - hidden
        - pseudoCode
      type: object
    VehicleComponentCategory:
      description: The component category of a VehicleComponent.
      properties:
        cardinality:
          $ref: '#/components/schemas/VehicleComponentCategoryCardinality'
        categoryId:
          type: string
        categoryName:
          type: string
        categorySortId:
          type: number
        componentIds:
          items:
            type: string
          type: array
        subcategories:
          items:
            $ref: '#/components/schemas/VehicleComponentCategory'
          type: array
      required:
        - categoryId
        - categorySortId
        - categoryName
        - cardinality
        - subcategories
        - componentIds
      type: object
    VehicleComponentCategoryCardinality:
      description: The cardinality of the vehicle components belong to component category.
      enum:
        - NOT_DEFINED
        - ONE_OR_NONE
        - EXACTLY_ONE
        - ARBITRARY
      type: string
    VehicleComponentImage:
      description: Vehicle component images with meta information and urls.
      properties:
        perspective:
          type: string
        resolution:
          type: string
        uris:
          items:
            type: string
          type: array
      required:
        - perspective
        - resolution
        - uris
      type: object
    VehicleComponentTree:
      description: Contains the vehicle components and the structure with component categories.
      properties:
        _links:
          $ref: '#/components/schemas/SelfLink'
        componentCategories:
          items:
            $ref: '#/components/schemas/VehicleComponentCategory'
          type: array
        vehicleComponents:
          additionalProperties:
            $ref: '#/components/schemas/VehicleComponent'
          properties:
            componentId:
              $ref: '#/components/schemas/VehicleComponent'
          type: object
      required:
        - vehicleComponents
        - componentCategories
      type: object
    VehicleComponentType:
      description: The component type of a vehicle component.
      enum:
        - ANY
        - WHEELS
        - PAINTS
        - UPHOLSTERIES
        - TRIMS
        - PACKAGES
        - LINES
        - SPECIAL_EDITION
        - SPECIAL_EQUIPMENT
      type: string
    VehicleConfiguration:
      description: A vehicle configuration.
      properties:
        _links:
          $ref: '#/components/schemas/SelfSelectablesImageVehicleLinks'
        changeYear:
          type: string
        componentCategories:
          items:
            $ref: '#/components/schemas/VehicleComponentCategory'
          type: array
        configurationId:
          type: string
        configurationPrice:
          $ref: '#/components/schemas/PriceInformation'
        deltaExtraEquipmentPrice:
          $ref: '#/components/schemas/PriceInformation'
        initialPrice:
          $ref: '#/components/schemas/PriceInformation'
        marketId:
          type: string
        modelId:
          type: string
        modelYear:
          type: string
        stageInformation:
          $ref: '#/components/schemas/VehicleImage'
        technicalInformation:
          $ref: '#/components/schemas/TechnicalInformation'
        vehicleComponents:
          items:
            $ref: '#/components/schemas/VehicleComponent'
          type: array
        wltpConfiguration:
          type: boolean
      required:
        - marketId
        - modelId
        - configurationId
        - initialPrice
        - configurationPrice
        - deltaExtraEquipmentPrice
        - modelYear
        - vehicleComponents
        - wltpConfiguration
        - _links
      type: object
    VehicleImage:
      description: Contains all informations about vehicle images.
      properties:
        availableMediaQualifiers:
          description: additional mediaQualifiers that specify vehicle's state
          type: string
        availablePerspectives:
          description: a string of 36 comma-separated possible perspectives (in 10-degree-steps)
          type: string
        availableResolutions:
          description: a string of possible image resolutions
          type: string
        templateUri:
          description: |
            A generic url pattern describing how all associated image urls look like. The pattern contains parameters ${perspective}, ${resolution} and ${mediaQualifiers}, instead of which one or many values listed in response json can be written, according to the following provisions
            - ${perspective} - exactly one value from the perspectives array
            - ${resolutions} - exactly one value from the resolutions array
            - ${mediaQualifiers} - zero, one or many comma-separated values from the mediaQualifiers array
          type: string
      required:
        - templateUri
        - availablePerspectives
        - availableResolutions
        - availableMediaQualifiers
      type: object
    VehicleImageResponse:
      description: 'The response object holds either an error object, in case that the request was malformed, or a vehicle object containing all urls for the requested perspectives.'
      properties:
        vehicle:
          additionalProperties:
            $ref: '#/components/schemas/ImageUrlWithError'
          description: 'A map holding a vehicle image for each requested perspective, e.g. EXT000.'
          type: object
      required:
        - vehicle
      type: object
    VehicleModel:
      description: 'The model of a Vehicle, e.g. ''176042_002''.'
      properties:
        _links:
          $ref: '#/components/schemas/SelfConfigurationLinks'
        baumuster:
          type: string
        dataSupply:
          $ref: '#/components/schemas/DataSupply'
        modelId:
          type: string
        name:
          type: string
        nationalSalesType:
          type: string
        priceInformation:
          $ref: '#/components/schemas/PriceInformation'
        productGroup:
          $ref: '#/components/schemas/ProductGroup'
        shortName:
          type: string
        vehicleBody:
          $ref: '#/components/schemas/VehicleBody'
        vehicleClass:
          $ref: '#/components/schemas/VehicleClass'
      required:
        - modelId
        - shortName
        - name
        - baumuster
        - nationalSalesType
        - vehicleClass
        - vehicleBody
        - productGroup
        - dataSupply
        - priceInformation
        - _links
      type: object
    Weights:
      description: Holds different weights of the vehicle.
      properties:
        maximumTrailingLoadWithBrakes:
          $ref: '#/components/schemas/Amount'
        maximumTrailingLoadWithoutBrakes:
          $ref: '#/components/schemas/Amount'
        maximumWeight:
          $ref: '#/components/schemas/Amount'
        maximumWeightRoof:
          $ref: '#/components/schemas/Amount'
        unloadedWeight:
          $ref: '#/components/schemas/Amount'
      type: object
    Wltp:
      description: Holds all relevant informations for the Wltp 'Worldwide harmonized Light vehicles Test Procedure' drive cycle.
      properties:
        certification:
          $ref: '#/components/schemas/WltpCertification'
        consumption:
          $ref: '#/components/schemas/WltpConsumption'
        emission:
          $ref: '#/components/schemas/WltpEmission'
        range:
          $ref: '#/components/schemas/WltpRange'
      required:
        - consumption
        - emission
        - certification
      type: object
    WltpCertification:
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' certification.
      properties:
        deviationFactor:
          $ref: '#/components/schemas/DriveCycleAmount'
        hydrocarbons:
          $ref: '#/components/schemas/DriveCycleAmount'
        nitricOxide:
          $ref: '#/components/schemas/DriveCycleAmount'
        nonMethaneHydrocarbons:
          $ref: '#/components/schemas/DriveCycleAmount'
        particulateEmission:
          $ref: '#/components/schemas/DriveCycleAmount'
        particulateNumber:
          $ref: '#/components/schemas/DriveCycleAmount'
        totalHydrocarbons:
          $ref: '#/components/schemas/DriveCycleAmount'
        totalHydrocarbonsNitricOxide:
          $ref: '#/components/schemas/DriveCycleAmount'
        verificationFactor:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - hydrocarbons
        - nitricOxide
        - nonMethaneHydrocarbons
        - particulateEmission
        - particulateNumber
        - totalHydrocarbonsNitricOxide
        - totalHydrocarbons
        - deviationFactor
        - verificationFactor
      type: object
    WltpConsumption:
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' consumption.
      properties:
        chargeDeplete:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteCop:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteWeighted:
          $ref: '#/components/schemas/WltpGear'
        extraHigh:
          $ref: '#/components/schemas/WltpGear'
        high:
          $ref: '#/components/schemas/WltpGear'
        low:
          $ref: '#/components/schemas/WltpGear'
        lowMid:
          $ref: '#/components/schemas/WltpGear'
        medium:
          $ref: '#/components/schemas/WltpGear'
        total:
          $ref: '#/components/schemas/WltpGear'
        weighted:
          $ref: '#/components/schemas/WltpGear'
      required:
        - low
        - medium
        - high
        - extraHigh
        - total
      type: object
    WltpElectricRange:
      description: The allElectric and equivalentAllElectric range that a vehicle (pure-electric or hybrid) can reach
      properties:
        all:
          $ref: '#/components/schemas/DriveCycleAmount'
        equivalentAll:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - all
        - equivalentAll
      type: object
    WltpEmission:
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' emission.
      properties:
        chargeDeplete:
          $ref: '#/components/schemas/WltpGear'
        chargeDepleteCop:
          $ref: '#/components/schemas/WltpGear'
        extraHigh:
          $ref: '#/components/schemas/WltpGear'
        high:
          $ref: '#/components/schemas/WltpGear'
        low:
          $ref: '#/components/schemas/WltpGear'
        medium:
          $ref: '#/components/schemas/WltpGear'
        total:
          $ref: '#/components/schemas/WltpGear'
        weighted:
          $ref: '#/components/schemas/WltpGear'
      required:
        - low
        - medium
        - high
        - extraHigh
        - total
      type: object
    WltpGear:
      description: The gear of a vehicle. A vehicle can have a primary and a secondary gear.
      properties:
        primaryGear:
          $ref: '#/components/schemas/DriveCycleAmount'
        secondaryGear:
          $ref: '#/components/schemas/DriveCycleAmount'
      required:
        - primaryGear
      type: object
    WltpRange:
      description: The Wltp 'Worldwide harmonized Light vehicles Test Procedure' range.
      properties:
        high:
          $ref: '#/components/schemas/WltpElectricRange'
        low:
          $ref: '#/components/schemas/WltpElectricRange'
        lowMid:
          $ref: '#/components/schemas/WltpElectricRange'
        medium:
          $ref: '#/components/schemas/WltpElectricRange'
        total:
          $ref: '#/components/schemas/WltpElectricRange'
      required:
        - low
        - medium
        - high
        - lowMid
        - total
      type: object
    productGroupResponse:
      properties:
        _links:
          $ref: '#/components/schemas/SelfModelLinks'
        market:
          $ref: '#/components/schemas/Market'
        productGroups:
          items:
            enum:
              - PKW
              - GELAENDEWAGEN
              - VAN
              - SPRINTER
              - CITAN
              - SMART
            type: string
          type: array
      type: object
  securitySchemes:
    apikey:
      name: apikey
      type: apiKey
      in: query
security:
  - apikey: []
