{
    "summary": "A summary of what changed between versions",
    "document-id": "6CA6C9E2-DEE3-4A35-9F41-25D4B69661A9",
    "version": "2.1.0",
    "from": "v_1.1.1",
    "to": "v_1.2.0",
    "compare-config": {
        "include-provider-support": false,
        "allowed-endpoint-id-update": false,
        "allowed-type-rename": false,
        "encoderConfiguration": {
            "dateEncodingStrategy": "deferredToDate",
            "dataEncodingStrategy": "base64"
        }
    },
    "serviceChanges": [
        {
            "type": "update",
            "id": "SERVICE_INFO_ID",
            "updated": {
                "type": "version",
                "from": "v_1.1.1",
                "to": "v_1.2.0"
            },
            "breaking": false,
            "solvable": true
        }
    ],
    "modelChanges": [
        {
            "type": "removal",
            "id": "FullItem#fields#purpose",
            "breaking": false,
            "solvable": false
        },
        {
            "type": "removal",
            "id": "FullItem#fields#section",
            "breaking": false,
            "solvable": false
        },
        {
            "type": "removal",
            "id": "FullItem#fields#type",
            "breaking": false,
            "solvable": false
        },
        {
            "type": "removal",
            "id": "FullItem#fields",
            "breaking": false,
            "solvable": false
        },
        {
            "type": "addition",
            "id": "Field#type",
            "added": {
                "enum": {
                    "typeName": {
                        "rootComponent": {
                            "name": "Field#type"
                        }
                    },
                    "rawValueType": {
                        "scalar": "String"
                    },
                    "cases": [
                        {
                            "name": "STRING",
                            "rawValue": "STRING",
                            "context": {}
                        },
                        {
                            "name": "EMAIL",
                            "rawValue": "EMAIL",
                            "context": {}
                        },
                        {
                            "name": "CONCEALED",
                            "rawValue": "CONCEALED",
                            "context": {}
                        },
                        {
                            "name": "URL",
                            "rawValue": "URL",
                            "context": {}
                        },
                        {
                            "name": "TOTP",
                            "rawValue": "TOTP",
                            "context": {}
                        },
                        {
                            "name": "DATE",
                            "rawValue": "DATE",
                            "context": {}
                        },
                        {
                            "name": "MONTH_YEAR",
                            "rawValue": "MONTH_YEAR",
                            "context": {}
                        },
                        {
                            "name": "MENU",
                            "rawValue": "MENU",
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "Field",
            "added": {
                "object": {
                    "typeName": {
                        "rootComponent": {
                            "name": "Field"
                        }
                    },
                    "properties": [
                        {
                            "name": "entropy",
                            "type": {
                                "optional": {
                                    "scalar": "Double"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "generate",
                            "type": {
                                "optional": {
                                    "scalar": "Bool"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "id",
                            "type": {
                                "scalar": "String"
                            },
                            "context": {}
                        },
                        {
                            "name": "label",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "purpose",
                            "type": {
                                "optional": {
                                    "reference": "Field#purpose"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "recipe",
                            "type": {
                                "reference": "GeneratorRecipe"
                            },
                            "context": {}
                        },
                        {
                            "name": "section",
                            "type": {
                                "optional": {
                                    "reference": "Field#section"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "type",
                            "type": {
                                "optional": {
                                    "reference": "Field#type"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "value",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "Field#purpose",
            "added": {
                "enum": {
                    "typeName": {
                        "rootComponent": {
                            "name": "Field#purpose"
                        }
                    },
                    "rawValueType": {
                        "scalar": "String"
                    },
                    "cases": [
                        {
                            "name": "",
                            "rawValue": "",
                            "context": {}
                        },
                        {
                            "name": "USERNAME",
                            "rawValue": "USERNAME",
                            "context": {}
                        },
                        {
                            "name": "PASSWORD",
                            "rawValue": "PASSWORD",
                            "context": {}
                        },
                        {
                            "name": "NOTES",
                            "rawValue": "NOTES",
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "GetServerHealth#_Response",
            "added": {
                "object": {
                    "typeName": {
                        "rootComponent": {
                            "name": "GetServerHealth#_Response"
                        }
                    },
                    "properties": [
                        {
                            "name": "dependencies",
                            "type": {
                                "optional": {
                                    "repeated": {
                                        "reference": "ServiceDependency"
                                    }
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "name",
                            "type": {
                                "scalar": "String"
                            },
                            "context": {}
                        },
                        {
                            "name": "version",
                            "type": {
                                "scalar": "String"
                            },
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "ServiceDependency",
            "added": {
                "object": {
                    "typeName": {
                        "rootComponent": {
                            "name": "ServiceDependency"
                        }
                    },
                    "properties": [
                        {
                            "name": "message",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "service",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "status",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "File",
            "added": {
                "object": {
                    "typeName": {
                        "rootComponent": {
                            "name": "File"
                        }
                    },
                    "properties": [
                        {
                            "name": "content",
                            "type": {
                                "optional": {
                                    "scalar": "Data"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "content_path",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "id",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "name",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        },
                        {
                            "name": "size",
                            "type": {
                                "optional": {
                                    "scalar": "Int"
                                }
                            },
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "Field#section",
            "added": {
                "object": {
                    "typeName": {
                        "rootComponent": {
                            "name": "Field#section"
                        }
                    },
                    "properties": [
                        {
                            "name": "id",
                            "type": {
                                "optional": {
                                    "scalar": "String"
                                }
                            },
                            "context": {}
                        }
                    ],
                    "context": {}
                }
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "update",
            "id": "Item#vault",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 0,
                        "backwardMigration": 1
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Vault",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 2,
                        "backwardMigration": 3,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "APIRequest#resource#item",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 4,
                        "backwardMigration": 5,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "FullItem#sections",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 6,
                        "backwardMigration": 7,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "APIRequest#actor",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "account",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 8,
                        "backwardMigration": 9,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "APIRequest#actor",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "jti",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 10,
                        "backwardMigration": 11,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Item",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "lastEditedBy",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 12,
                        "backwardMigration": 13,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "Item",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 14,
                        "backwardMigration": 15,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "APIRequest#resource#vault",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 16,
                        "backwardMigration": 17,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "FullItem",
            "updated": {
                "type": "property",
                "property": {
                    "type": "addition",
                    "id": "files",
                    "added": {
                        "name": "files",
                        "type": {
                            "optional": {
                                "repeated": {
                                    "reference": "File"
                                }
                            }
                        },
                        "context": {}
                    },
                    "breaking": false,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "FullItem",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "lastEditedBy",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 18,
                        "backwardMigration": 19,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "FullItem",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "id",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "scalar": "UUID"
                            }
                        },
                        "to": {
                            "optional": {
                                "scalar": "String"
                            }
                        },
                        "forwardMigration": 20,
                        "backwardMigration": 21,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "FullItem",
            "updated": {
                "type": "property",
                "property": {
                    "type": "update",
                    "id": "fields",
                    "updated": {
                        "type": "type",
                        "from": {
                            "optional": {
                                "repeated": {
                                    "reference": "FullItem#fields"
                                }
                            }
                        },
                        "to": {
                            "optional": {
                                "repeated": {
                                    "reference": "Field"
                                }
                            }
                        },
                        "forwardMigration": 22,
                        "backwardMigration": 23,
                        "conversionWarning": "'ApodiniMigrator' is not able to automatically generate convert scripts between two types with different cardinalities or root types. Convert methods must be provided by the developer of the web service. Otherwise, the respective types in the client applications that will consume this Migration Guide, will be initialized with these default scripts."
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        }
    ],
    "endpointChanges": [
        {
            "type": "addition",
            "id": "GetServerHealth",
            "added": {
                "deltaIdentifier": "GetServerHealth",
                "identifiers": {
                    "EndpointPath": "/health",
                    "HandlerName": "GetServerHealth",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [],
                "response": {
                    "reference": "GetServerHealth#_Response"
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "GetHeartbeat",
            "added": {
                "deltaIdentifier": "GetHeartbeat",
                "identifiers": {
                    "EndpointPath": "/heartbeat",
                    "HandlerName": "GetHeartbeat",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [],
                "response": {
                    "scalar": "String"
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "GetPrometheusMetrics",
            "added": {
                "deltaIdentifier": "GetPrometheusMetrics",
                "identifiers": {
                    "EndpointPath": "/metrics",
                    "HandlerName": "GetPrometheusMetrics",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [],
                "response": {
                    "scalar": "String"
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "GetItemFiles",
            "added": {
                "deltaIdentifier": "GetItemFiles",
                "identifiers": {
                    "EndpointPath": "/vaults/{vaultUuid}/items/{itemUuid}/files",
                    "HandlerName": "GetItemFiles",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "vaultUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "itemUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "inline_files",
                        "type": {
                            "scalar": "Bool"
                        },
                        "kind": "lightweight",
                        "necessity": "optional"
                    }
                ],
                "response": {
                    "repeated": {
                        "reference": "File"
                    }
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "GetDetailsOfFileById",
            "added": {
                "deltaIdentifier": "GetDetailsOfFileById",
                "identifiers": {
                    "EndpointPath": "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}",
                    "HandlerName": "GetDetailsOfFileById",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "vaultUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "itemUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "fileUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "inline_files",
                        "type": {
                            "scalar": "Bool"
                        },
                        "kind": "lightweight",
                        "necessity": "optional"
                    }
                ],
                "response": {
                    "reference": "File"
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "addition",
            "id": "DownloadFileByID",
            "added": {
                "deltaIdentifier": "DownloadFileByID",
                "identifiers": {
                    "EndpointPath": "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content",
                    "HandlerName": "DownloadFileByID",
                    "Operation": "read"
                },
                "communicationPattern": "requestResponse",
                "parameters": [
                    {
                        "name": "vaultUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "itemUuid",
                        "type": {
                            "scalar": "UUID"
                        },
                        "kind": "path",
                        "necessity": "required"
                    },
                    {
                        "name": "fileUuid",
                        "type": {
                            "scalar": "String"
                        },
                        "kind": "path",
                        "necessity": "required"
                    }
                ],
                "response": {
                    "scalar": "Data"
                },
                "errors": []
            },
            "breaking": false,
            "solvable": true
        },
        {
            "type": "update",
            "id": "GetVaultItemById",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 24
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "GetVaultItemById",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "itemUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 25
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "GetVaultById",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 26
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "UpdateVaultItem",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 27
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "UpdateVaultItem",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "itemUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 28
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "GetVaultItems",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 29
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "CreateVaultItem",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 30
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "DeleteVaultItem",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "vaultUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 31
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        },
        {
            "type": "update",
            "id": "DeleteVaultItem",
            "updated": {
                "type": "parameter",
                "parameter": {
                    "type": "update",
                    "id": "itemUuid",
                    "updated": {
                        "type": "type",
                        "from": {
                            "scalar": "UUID"
                        },
                        "to": {
                            "scalar": "String"
                        },
                        "forwardMigration": 32
                    },
                    "breaking": true,
                    "solvable": true
                }
            }
        }
    ],
    "scripts": {
        "27": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "12": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "5": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "21": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "1": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "32": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "17": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "22": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "26": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "31": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "4": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "29": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "20": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "16": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "25": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "24": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "3": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "18": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "8": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "13": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "10": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "19": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "0": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "11": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "6": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "14": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}",
        "15": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "9": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "23": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "28": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "30": "function convert(input) {\n    return JSON.stringify(JSON.parse(input))\n}",
        "7": "function convert(ignoredTo) {\n    return JSON.stringify(null)\n}",
        "2": "function convert(ignoredFrom) {\n    return JSON.stringify(null)\n}"
    },
    "json-values": {},
    "updated-json-representations": {
        "Vault": "{\n\"attributeVersion\" : null,\n\"contentVersion\" : null,\n\"createdAt\" : null,\n\"description\" : null,\n\"id\" : null,\n\"items\" : null,\n\"name\" : null,\n\"type\" : null,\n\"updatedAt\" : null\n}",
        "APIRequest#actor": "{\n\"account\" : null,\n\"id\" : null,\n\"jti\" : null,\n\"requestIp\" : null,\n\"userAgent\" : null\n}",
        "FullItem": "{\n\"category\" : \"LOGIN\",\n\"createdAt\" : null,\n\"favorite\" : null,\n\"fields\" : null,\n\"files\" : null,\n\"id\" : null,\n\"lastEditedBy\" : null,\n\"sections\" : null,\n\"state\" : null,\n\"tags\" : null,\n\"title\" : null,\n\"updatedAt\" : null,\n\"urls\" : null,\n\"vault\" : {\n\"id\" : \"\"\n},\n\"version\" : null\n}",
        "APIRequest#resource#item": "{\n\"id\" : null\n}",
        "FullItem#sections": "{\n\"id\" : null,\n\"label\" : null\n}",
        "Item": "{\n\"category\" : \"LOGIN\",\n\"createdAt\" : null,\n\"favorite\" : null,\n\"id\" : null,\n\"lastEditedBy\" : null,\n\"state\" : null,\n\"tags\" : null,\n\"title\" : null,\n\"updatedAt\" : null,\n\"urls\" : null,\n\"vault\" : {\n\"id\" : \"\"\n},\n\"version\" : null\n}",
        "APIRequest#resource#vault": "{\n\"id\" : null\n}",
        "Item#vault": "{\n\"id\" : \"\"\n}"
    }
}